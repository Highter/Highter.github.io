<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git status中文显示乱码]]></title>
    <url>%2F2017%2F05%2F29%2Fgit%20status%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81%2F</url>
    <content type="text"><![CDATA[git status显示类似如下乱码1Jenkins\345\256\211\350\243\205(war\345\214\205\345\275\242\345\274\217).md 解决方法1git config core.quotepath false]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github+hexo多终端同步]]></title>
    <url>%2F2017%2F05%2F28%2Fgithub%2Bhexo%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[思路操作思路很简单，就是把站点的东西全部存放在github项目中的hexo分支中，A、B电脑只要维护项目的hexo分支就行。 初始化hexo分支(A电脑)1234567git init //初始化本地仓库git add . //添加所有的文件(hexo所有的文件)git commit -m &quot;blog source hexo&quot;git branch hexo //新建hexo分支git checkout hexo //切换到hexo分支上git remote add origin git@github.com:yourname/yourname.github.io.git //将本地与Github项目对接git push origin hexo //push到Github项目的hexo分支上 使用hexo分支(B电脑)12345678git clone -b hexo git@github.com:yourname/yourname.github.io.git //将Github中hexo分支clone到本地cd yourname.github.io //切换到刚刚clone的文件夹内npm install //安装必要的所需组件，不用再inithexo new post &quot;test&quot; //新建一个.md文件，并编辑完成自己的博客内容git add source //添加文字git commit -m &quot;测试&quot;git push origin hexo //更新分支hexo d -g //同步博客到Github中的master 维护hexo分支(A、B电脑)123456git pull origin hexo //先pull完成本地与远端的融合hexo new post &quot; new blog name&quot;git add sourcegit commit -m &quot;XX&quot;git push origin hexohexo d -g]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac电脑生成SSH key和Github通信]]></title>
    <url>%2F2017%2F05%2F27%2FMac%E7%94%B5%E8%84%91%E7%94%9F%E6%88%90SSH%20key%E5%92%8CGithub%E9%80%9A%E4%BF%A1%2F</url>
    <content type="text"><![CDATA[检查ssh1234Hunter-Mac:Highter.github.io yangjianwei$ ls -al ~/.sshtotal 16drwx------ 3 yangjianwei staff 102 Dec 13 15:20 .drwxr-xr-x+ 60 yangjianwei staff 2040 May 14 14:58 .. 注意：如果已经存在ssh key，则可以看到 id_rsa 和 id_rsa.pub ，可跳过第二步。 生成ssh1ssh-keygen -t rsa -b 4096 -C "your_email@example.com" 邮箱填写自己的邮箱，中间一直按回车即可。 查看本地ssh查看ssh的key值 1Hunter-Mac:.ssh yangjianwei$ cat ~/.ssh/id_rsa.pub github配置ssh在github上找到ssh配置页面，Profile-&gt;SSH and GPG keys-&gt;New SSH key，填写ssh的title和key值]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[管理多个github账号]]></title>
    <url>%2F2017%2F05%2F27%2F%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[场景描述之前在电脑上添加A账号的ssh，后来使用B账号的github，在提交代码的时候遇到这样的情况，比如fatal: remote error: Permission denied 解决方案参考这篇文章https://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts–net-22574]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下hexo使用next主题]]></title>
    <url>%2F2017%2F05%2F26%2FMac%E4%B8%8Bhexo%E5%AE%89%E8%A3%85next%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Mac下hexo使用next主题下载主题在终端窗口下，切到 Hexo 站点目录下，下载NexT主题。这里我使用的站点目录是 Highter.github.io 1Hunter-Mac:Highter.github.io yangjianwei$ git clone https://github.com/iissnan/hexo-theme-next themes/next 开启主题在站点目录下修改 _config.yml 文件 1theme: next 验证主题验证主题需要启动服务来看效果，在启动服务前先执行 hexo clean 来清理hexo缓存 清理缓存1Hunter-Mac:Highter.github.io yangjianwei$ hexo clean 启动服务1Hunter-Mac:Highter.github.io yangjianwei$ hexo server 查看效果在浏览器输入http://localhost:4000/查看效果 设置主题设置主题方案Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白Mist - Muse 的紧凑版本，整洁有序的单栏外观Pisces - 双栏 Scheme，小家碧玉似的清新Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可这里选择 Pisces作为例子我的 主题配置文件 路径在：1../Highter.github.io/themes/next/_config.yml 修改如下：1234# Schemes#scheme: Muse#scheme: Mistscheme: Pisces 设置语言编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，我的 站点配置文件 路径在：1../Highter.github.io/_config.yml 配置如下： 1language: zh-Hans 目前 NexT 支持的语言如以下表格所示： 语言 代码 设定示例 English en language: en 简体中文 zh-Hans language: zh-Hans Français fr-FR language: fr-FR Português pt language: pt or language: pt-BR 繁體中文 zh-hk 或者 zh-tw language: zh-hk Русский язык ru language: ru Deutsch de language: de 日本語 ja language: ja Indonesian id language: id Korean ko language: ko 设置菜单默认运行只有 Home 、Archives 、Tags修改主题 主题配置文件12345678menu: home: / #首页 categories: /categories #分类 about: /about #关于 archives: /archives #归档 tags: /tags #标签 sitemap: /sitemap.xml commonweal: /404.html 设置侧栏left - 靠左放置right - 靠右放置修改主题 主题配置文件12sidebar: position: left 头像编辑主题 主题配置文件 修改字段 avatar， 值设置成头像的链接地址。其中，头像的链接地址可以是： 地址 值 完整的互联网 URI http://example.com/avatar.png 站点内的地址 将头像放置主题目录下的 source/uploads/ （新建 uploads 目录若不存在） 配置为：avatar: /uploads/avatar.png或者 放置在 source/images/ 目录下 配置为：avatar: /images/avatar.png 头像设置示例avatar: /uploads/avatar.jpg 设置站点1234567# Sitetitle: Highter's blog #标题subtitle: Smile at life ^_^ #小标题description: Life is short,I use Java #描述author: Highter #作者language: zh-Hans #语言timezone: 添加文章把自己所写的文章添加到站点的_posts文件下 123Hunter-Mac:Highter.github.io yangjianwei$ hexo cleanINFO Deleted database.Hunter-Mac:Highter.github.io yangjianwei$ hexo s 到这一步我们可以查看一下效果 分类页当我们点击分类的时候可以看到如图 需要初始化分类 hexo new page categories12Hunter-Mac:Highter.github.io yangjianwei$ hexo new page categoriesINFO Created: ~/Documents/msg/github/Highter.github.io/source/categories/index.md 修改~/Documents/msg/github/Highter.github.io/source/categories/index.md 文件123456---title: 分类date: 2017-05-18 22:38:17type: "categories"comments: false--- 标签页需要初始化标签 hexo new page tags12Hunter-Mac:Highter.github.io yangjianwei$ hexo new page tagsINFO Created: ~/Documents/msg/github/Highter.github.io/source/tags/index.md 修改~/Documents/msg/github/Highter.github.io/source/tags/index.md 文件123456---title: 标签date: 2017-05-18 22:57:40type: "tags"comments: false--- 设置文章分类和标签添加类似下面的分类和标签，注意categories和tags的冒号后需要空格12345---title: CentOS安装JDKcategories: [java]tags: [java,centos,jdk]--- 设置阅读更多修改 主题配置文件1234# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: true #设置为true length: 150 效果 设置描述123456---title: CentOS安装JDKcategories: [java]tags: [java,centos,jdk]description: 本文介绍在linux系统下安装JDK，这里选择在CentOS系统下实践。#摘要描述--- 结束语上面只是一些关于主题的基础配置，更多详情配置参考Next主题使用文档]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下使用Hexo搭建github博客]]></title>
    <url>%2F2017%2F05%2F26%2FMac%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Mac下使用Hexo搭建github博客注意：本文实践是在mac系统下进行，hexo安装参考Mac下安装Hexo一文。 复制github仓库地址在自己的github账号下复制 *.github.io仓库的地址，如果没有，需要新建一个 关联github终端里cd到存放博客的文件夹下，这里我的文件夹名字为 Highter.github.io，编辑_config.yml，滑到最底部，将deploy里的内容改为如下：1234deploy: type: git repository: https://github.com/Highter/Highter.github.io.git // 这个地方填写自己的仓库地址 branch: master 部署到github发布到github1Hunter-Mac:Highter.github.io yangjianwei$ hexo deploy 根据提示输入用户名和密码，回车即可 注意： 运行 hexo deploy部署到github ，若提示“ERROR Deployer not found: git”，如下 则安装hexo-deployer-git,如图表示安装成功 1Hunter-Mac:Highter.github.io yangjianwei$ npm install hexo-deployer-git --save 查看效果在浏览器输入https://yangjianwei.github.io/ 查看效果(细心的朋友可能发现了访问链接和步骤2配置的仓库地址不一样。个人有几个github账号，为了方便大家看到效果，我把测试的东西推送到yangjianwei这个账号上了)]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下安装Hexo]]></title>
    <url>%2F2017%2F05%2F26%2FMac%E4%B8%8B%E5%AE%89%E8%A3%85Hexo%2F</url>
    <content type="text"><![CDATA[安装流程指导安装流程：homebrew—-&gt;nodejs—-&gt;hexo 注意：hexo是基于nodejs的，而安装nodejs这里使用homebrew方式 安装homebrew1ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 安装nodejs 1brew install node 安装hexo1sudo npm install -g hexo 初始化初始化文件夹创建存放博客的文件夹，这里我创建的文件夹名字为 Highter.github.io(为了之后和github配合使用)12Hunter-Mac:github yangjianwei$ mkdir Highter.github.ioHunter-Mac:github yangjianwei$ hexo init Highter.github.io/ 安装npm切换到所建立文件夹路径下，安装npm12Hunter-Mac:github yangjianwei$ cd Highter.github.io/Hunter-Mac:Highter.github.io yangjianwei$ npm install 启动hexo服务器1Hunter-Mac:Highter.github.io yangjianwei$ hexo server 如图表示启动成功 查看效果在浏览器输入http://localhost:4000 查看效果]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VirtualBox安装centos7]]></title>
    <url>%2F2017%2F05%2F21%2Fvirtualbox%E5%AE%89%E8%A3%85centos%2F</url>
    <content type="text"><![CDATA[下载下载地址： https://www.centos.org/download/我这里选择的是DVD ISO版本。 创建虚拟系统新建 虚拟电脑名称和系统类型填写名称，这里填写 CentOS7,类型选择 Linux，版本选择 Other Linux(64-bit) 内存大小设置内存大小，我电脑内存是8G的，所以这里我赋予它2G，大家可以根据自己电脑配置情况设置 虚拟硬盘选择 现在创建虚拟硬盘 虚拟硬盘文件类型文件类型选择VDI(VirtualBox 磁盘映像) 动态分配建议选择动态分配，不会占用太多物理空间，根据情况动态分配 文件位置和大小选择保存位置和设置极限大小 设置虚拟系统 系统选择让 光驱 启动优先 存储选择 光驱 位置 网络设置网络，连接方式选择 网络地址转换(NAT) 安装安装首页选择 Install CentOS Linux 7,回车 选择语言 安装主界面进入安装主界面之后要设置 软件选择 和 安装位置 软件选择选择所需要的附加选项，点击 完成 安装位置选择 本地标准磁盘，点击 完成 开始安装设置完 软件选择 和 安装位置 之后点击 开始安装 用户设置设置 ROOT密码 和 创建用户 ROOT密码 创建用户 等待安装设置完 ROOT密码 和 创建用户 之后等待安装 安装完成安装完成之后点击 重启 即可 启动启动前配置启动的时候提示需要同意协议书和设置网络，如果你在步骤 4.3 上已经设置了，这里就不需要再设置 同意协议书勾选 同意 复选框，点击 完成 即可 设置网络点击右边开关，显示 开启 之后点击完成即可 输入用户密码输入步骤 4.4.2 设置的密码 系统主界面登录之后可以看到系统的主界面，如图]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Eclipse中导入GitHub项目]]></title>
    <url>%2F2017%2F05%2F04%2FEclipse%E4%B8%AD%E5%AF%BC%E5%85%A5GitHub%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[注意：安装前请确认一下电脑是否安装了Git，Git的安装可以参考Git安装一文。 选择工程Eclipse中选择File-》import-》Git-》Projects from Git，点击 Next 选择仓库源选择Clone URI，点击 Next 配置仓库源信息URI填写git的仓库URL，并在Authentication中填写GitHub的用户名和密码，打钩 Store in Secure Store记住密码，方便下次进来不需要再输入用户名和密码，这里的测试仓库源地址为 ：https://github.com/Highter/SpringBoot-SourceCode.git，配置完之后点击 Next 选择分支由于项目只有一个master分支，就选择master即可，点击Next 选择本地仓库位置在Directory点击Browse选择创建的本地仓库位置 等到项目下载 导出项目类型选择导出项目名称，这里选择Import as general project，导出成为一个普通工程，最后点击Next 配置项目名称配置完项目名称点击 Finish 即可]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>eclipse</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql批量插入-存在id相同则更新数据]]></title>
    <url>%2F2017%2F05%2F04%2Fsql%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%3A%E5%AD%98%E5%9C%A8id%E7%9B%B8%E5%90%8C%E5%88%99%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[建表语句12345678910SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for user-- ----------------------------DROP TABLE IF EXISTS `user`;CREATE TABLE `user` ( `a` int(11) NOT NULL, `b` varchar(20) DEFAULT NULL, PRIMARY KEY (`a`)) ENGINE=InnoDB DEFAULT CHARSET=utf8; 插入测试数据1INSERT INTO USER VALUES (1,'a'),(2,'b'),(3,'c'); 查看结果：1SELECT * from USER ; 插入存在id的测试数据1INSERT INTO USER VALUES (1,'a'),(2,'b'),(3,'c'),(4,'d') ON DUPLICATE KEY UPDATE b='test'; 查看结果：1SELECT * from USER ; 到此，我们已经可以成功看到测试结果，我们已经做到了 在sql批量插入时候，存在id相同则更新数据。]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tomcat报错： Tomcat version 7.0 only supports J2EE 1.2, 1.3, 1.4, and Java EE 5 and 6 Web modules]]></title>
    <url>%2F2017%2F05%2F04%2FTomcat%E6%8A%A5%E9%94%99%EF%BC%9A%20Tomcat%20version%207.0%20only%20supports%20J2EE%201.2%2C%201.3%2C%201.4%2C%20and%20Java%20EE%205%20and%206%20Web%20modules%2F</url>
    <content type="text"><![CDATA[问题描述web项目加载到tomcat时报错： Tomcat version 7.0 only supports J2EE 1.2, 1.3, 1.4, and Java EE 5 and 6 Web modules如图： 处理方法修改 org.eclipse.wst.common.project.facet.core.xml文件。在eclipse的workspace里面找到该项目，在项目下找到org.eclipse.wst.common.project.facet.core.xml文件。路径：.settings-&gt;org.eclipse.wst.common.project.facet.core.xml打开文件，如下123456789&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;faceted-project&gt; &lt;fixed facet="wst.jsdt.web"/&gt; &lt;installed facet="java" version="1.7"/&gt; &lt;installed facet="jst.web" version="3.1"/&gt; &lt;installed facet="jst.jsf" version="2.2"/&gt; &lt;installed facet="jst.jaxrs" version="2.0"/&gt; &lt;installed facet="wst.jsdt.web" version="1.0"/&gt;&lt;/faceted-project&gt; 修改 ，把version修改成3.0，修改完如下123456789&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;faceted-project&gt; &lt;fixed facet="wst.jsdt.web"/&gt; &lt;installed facet="java" version="1.7"/&gt; &lt;installed facet="jst.web" version="3.0"/&gt; &lt;installed facet="jst.jsf" version="2.2"/&gt; &lt;installed facet="jst.jaxrs" version="2.0"/&gt; &lt;installed facet="wst.jsdt.web" version="1.0"/&gt;&lt;/faceted-project&gt; 处理成果]]></content>
      <categories>
        <category>tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[上传本地代码到github]]></title>
    <url>%2F2017%2F05%2F03%2F%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E5%88%B0github%2F</url>
    <content type="text"><![CDATA[安装GitGit安装可以参考Git安装一文 创建GitHub仓库创建仓库在GitHub上点击 New repository，在创建仓库页面上想写完信息之后，点击 Create repository 即可 复制仓库地址点击Clone or download 之后，在弹出的小界面上可以直接复制该仓库的地址 初始化本地仓库克隆远程仓库到本地1git clone https://github.com/Highter/SpringBoot-SourceCode.git clone后面的地址就是步骤2.2复制的项目地址可以看到远程的仓库已经克隆到本地了 添加文件到本地待提交区把文件复制到SpringBoot-SourceCode文件下，cd到SpringBoot-SourceCode文件夹下，执行如下命令1git add . 如果只是想添加某个特定的文件，只需把.换成特定的文件名即可，如git add text.txt 提交到仓库1git commit -m &quot;注释语句&quot; 提交本地仓库到GitHub1git push 如果是首次推送代码，会弹出如图对话框，输入github的账号和密码点击 Login 即可 查看结果刷新github上仓库的页面，查看结果]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSP页面报错：The superclass javax.servlet.http.HttpServlet was not found on the Java Build Path]]></title>
    <url>%2F2017%2F05%2F02%2FJSP%E9%A1%B5%E9%9D%A2%E6%8A%A5%E9%94%99%EF%BC%9AThe%20superclass%20javax.servlet.http.HttpServlet%20was%20not%20found%20on%20the%20Java%20Build%20Path%2F</url>
    <content type="text"><![CDATA[问题描述新建的web项目，index.jsp页面报错：The superclass “javax.servlet.http.HttpServlet” was not found on the Java Build Path如图： 处理方法单击鼠标右键》Build Path》Configure Build Path,在Libraries下点击 Add Variable选择 Server Runtime 之后点击 Next选择Tomcat之后点击Finish最后点击 OK 即可 处理成果]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS安装JDK]]></title>
    <url>%2F2017%2F05%2F01%2FCentOS%E5%AE%89%E8%A3%85JDK%2F</url>
    <content type="text"><![CDATA[创建目录在/usr/local下创建java/jdk目录1234[higher@localhost ~]$ pwd/home/higher[higher@localhost ~]$ mkdir /usr/local/javamkdir: cannot create directory ‘/usr/local/java’: Permission denied 用户权限不足，切换到root用户 123456[higher@localhost ~]$ su rootPassword: [root@localhost higher]# mkdir /usr/local/java[root@localhost higher]# cd /usr/local/java/[root@localhost java]# mkdir jdk[root@localhost java]# cd jdk/ 下载JDK压缩包1[root@localhost jdk]# wget -c http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz 如图表示下载成功 解压1[root@localhost jdk]# tar -zxvf jdk-8u131-linux-x64.tar.gz 设置环境变量进入jdk目录，查看当前位置123[root@localhost jdk]# cd jdk1.8.0_131/[root@localhost jdk1.8.0_131]# pwd/usr/local/java/jdk/jdk1.8.0_131 编辑profile文件1[root@localhost jdk1.8.0_131]# vim /etc/profile 在profile文件末尾添加如下内容：12345JAVA_HOME=/usr/local/java/jdk/jdk1.8.0_131JRE_HOME=/usr/local/java/jdk/jdk1.8.0_131/jreCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME CLASS_PATH PATH 让修改生效:1[root@localhost jdk1.8.0_131]# source /etc/profile 验证1[root@localhost jdk1.8.0_131]# java -version 注意:如果查看到得JDK版本为OpenJDK不要惊慌，这是因为在安装CentOS的时候，自带了一个OpenJDK。如图 这个JDK并不是我们想要的，我们需要在/usr/bin目录重新设置java javac 链接。 12345[root@localhost jdk1.8.0_131]# cd /usr/bin/[root@localhost bin]# rm -rf java[root@localhost bin]# rm -rf javac[root@localhost bin]# ln -s /usr/local/java/jdk/jdk1.8.0_131/bin/java java[root@localhost bin]# ln -s /usr/local/java/jdk/jdk1.8.0_131/bin/javac javac 设置之后重新运行命令 java -version ,如图表示成功]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>centos</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tomcat配置详解]]></title>
    <url>%2F2017%2F04%2F27%2Ftomcat%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[配置用户名和密码找到tomcat的目录，修改conf路径下的tomcat-users.xml文件，如我本地地址为 D:\Java\TOMCAT\apache-tomcat-7-8080\conf\tomcat-users.xml在中添加如下内容，用户名和密码都为admin，保存即可。12345&lt;tomcat-users&gt; &lt;role rolename="manager-script"/&gt; &lt;role rolename="manager-gui"/&gt; &lt;user username="admin" password="admin" roles="manager-script,manager-gui"/&gt;&lt;/tomcat-users&gt; 配置端口修改conf路径下的server.xml文件，如我本地地址为 D:\Java\TOMCAT\apache-tomcat-7-8081\conf\server.xml a、修改http访问端口（默认为8080端口），将8080修改为tomcat不在使用的端口号，例如8081123&lt;Connector port="8081" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" /&gt; b、修改Shutdown端口（默认为8005端口），将8005修改为没有在使用的端口号，例如80151&lt;Server port="8015" shutdown="SHUTDOWN"&gt; c、修改8009端口，将8009修改为没有在使用的端口号，例如80191&lt;Connector port="8019" protocol="AJP/1.3" redirectPort="8443" /&gt;]]></content>
      <categories>
        <category>tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins安装(war包形式)]]></title>
    <url>%2F2017%2F04%2F26%2FJenkins%E5%AE%89%E8%A3%85(war%E5%8C%85%E5%BD%A2%E5%BC%8F)%2F</url>
    <content type="text"><![CDATA[下载下载地址： https://jenkins.io/download/选择war包下载，这里我选择的是稳定版本。 安装直接放到tomcat的webapps目录下，启动tomcat就可以了,双击startup.bat启动 配置Jenkins server配置页面在浏览器上输入 http://127.0.0.1:8080/jenkins/ 打开jenkins服务器 输入默认密码根据提示，找到密码输入，点击Continue 配置Jenkins server安装插件，这里选择推荐的插件进行安装，点击Install suggested plugins即可。当然用户也可以自定义选择插件进行安装，如果这一步选择插件有遗漏的话，后续也可以进行补充安装 等待配置等待安装，等待10分钟左右（电脑配置不同安装时间也不同） 设置用户和密码安装完之后，跳到配置用户和密码的界面，输入相关信息，设置用户和密码，点击 Sava and Finish 即可。如果这一步被跳过，默认用户名就是admin，默认密码就是3.2步骤的密码 配置成功到此，Jenkins server已经配置成功了。点击 Start using Jenkins 开启Jenkins之旅吧！ 访问Jenkins服务器登陆接下来在日常使用中，如果想打开Jenkins服务器，在浏览器输入 http://127.0.0.1:8080/jenkins ，填写配置的用户名和密码，点击登陆即可 Jenkins主界面登陆成功之后，就可以进入到Jenkins主界面了。欢迎来到新大陆！ Jenkins服务器开启和关闭在jenkins.war所在的tomcat路径下，找到bin目录比如我本地的路径： D:\Java\TOMCAT\apache-tomcat-7-8080\bin停止：shutdown.bat开始：startup.bat]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jenkins+git+maven搭建自动化部署环境]]></title>
    <url>%2F2017%2F04%2F26%2Fjenkins%2Bgit%2Bmaven%E6%90%AD%E5%BB%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[安装GitGit安装可以参考Git安装一文 安装MavenMaven的安装可以参考Maven安装一文 安装Jenkinsjenkins的安装可以参考3.1 Jenkins安装3.2 Jenkins安装(war包形式)注：为了方便，本次实验采用war包形式安装 jenkins配置插件管理经过步骤3的初始化插件安装，这时候jenkins已经具备了大部分了插件，个别插件才需要另外安装。已经点击 管理插件，进入插件管理界面。要安装两个插件：Maven Integration plugin 用来构建maven的项目,一个是对容器依赖的插件；Deploy to container Plugin 自动发布到相关容器上去 安装Maven Integration plugin如果已经安装，可直接跳过该步骤 。在系统管理／可选插件 里面，我们直接用全局搜索 Maven Integration plugin,打钩，点直接安装就行 安装Deploy to container Plugin如果已经安装，可直接跳过该步骤 。在系统管理／可选插件 里面，我们直接用全局搜索 Deploy to container Plugin,打钩，点直接安装就行 如果在使用过程中发现少了其它插件，安装步骤同4.1.1和4.1.2相似 设置全局工具进入全局工具配置页面，Global Tool Configuration Maven配置文件 JDK配置注：不要勾选自动安装，否则不能填写JAVA_HOME等信息，下面的maven、git等配置同样 Git配置说明：git选择的Path是git安装目录的cmd下的git.exe，在构建时执行git命令会调用这个程序 Maven配置 项目配置新建任务创建一个新的任务-&gt;构建一个maven项目，输入项目名，这里以JenkinsDemo为例子，点击OK 配置项目名和描述 源码管理配置源码管理这里我以Git为例子，Repository URL填写项目的地址，可以使https地址，也可以是SHH地址。注意，如果使用https地址，步骤需要点击Add-&gt;填写网站的用户名和密码，要使用SHH地址，在这之前我们必须在本机上生成了ssh密钥，并且在平台上设定过公钥才可以使用。这里我使用的是码云平台上的项目，参考文章 本地电脑和 Git @ OSC 之间SHH连接教程这是我用来测试项目的SHH地址：git@git.oschina.net:higher/webtest.git如有需要的朋友可以自行下载，https地址为: https://git.oschina.net/higher/webtest.gita.SHH方式 如果出现如下的错误，请检查公钥配置b.https方式 Build构建配置Build构建配置的Root POM填写:pom.xml；Gloals and options填写:clean package 构建后操作配置构建后操作选择Deploy war/ear to a container(如果没有这个，请检查是否安装了插件Deploy to container Plugin)，点击Add Container选择构建之后发布war包的位置，我本地用的tomcat7,所以选择它，填写内容对应如下,填写完点击 保存 即可。WAR/EAR files:target\webTest.war Tomcat 下 Manager user name:adminManager password:admin Tomcat URL:http://localhost:8080注意： jenkins构建成功之后会在 “.jenkins\workspace\任务名称\target” 路径下 产生war包，比如我本地位置为C:\Users\bank_gz\.jenkins\workspace\JenkinsDemo\target\webTest.war，如图填写的发布的Tomcat URL必须配置用户名和密码，配置的用户名和密码对应上面填写的Manager user name和Manager password,tomcat相关的配置参考tomcat配置详解，不然在构建的时候会报403的错误，如图 通过上面的步骤， 当构建时候会从git服务器拉去代码，再通过maven的clean package命令编译打包，成功时候就会在C:\Users\bank_gz\.jenkins\workspace\JenkinsDemo\target路径下产生webTest.war，同时发布到http://localhost:8080服务器下，当然Tomcat URL也可以填写其它url，比如http://localhost:8081。只要确定服务启动起来而且配置了用户名和密码就ok，这时候war包就会被加载到tomcat的webapps路径下被自动解压发布。 项目构建立即构建在新建的任务JenkinsDemo下,点击 立即构建，在构建历史上可以看到构建的历史，点击进去构建历史 查看构建日志在构建历史上点击 Console Output查看构建日志在构建历史上看到日志输出最后是Finished:SUCCESS即表示构建步骤成功 查看项目构建情况回到首页可也可以看到构建情况，如下图表示成功 测试成果在浏览器上输入http://127.0.0.1:8080/webTest/可以查到刚刚用来测试构建项目的首页]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>自动化部署</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oschina码云如何导入项目]]></title>
    <url>%2F2017%2F04%2F21%2Foschina%E7%A0%81%E4%BA%91%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[简易的命令行入门教程:Git 全局设置:12git config --global user.name &quot;用户名&quot;git config --global user.email &quot;邮箱&quot; 创建 git 仓库:12345678mkdir webtestcd webtestgit inittouch README.mdgit add README.mdgit commit -m &quot;注释&quot;git remote add origin https://git.oschina.net/higher/webtest.gitgit push -u origin master 已有项目?123cd existing_git_repogit remote add origin https://git.oschina.net/higher/webtest.gitgit push -u origin master]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>码云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第三方Maven仓库地址使用]]></title>
    <url>%2F2017%2F04%2F21%2F%E7%AC%AC%E4%B8%89%E6%96%B9Maven%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[第三方Maven仓库地址使用 国内maven仓库下载东西好慢，好多企业都会自建maven仓库，对于我们这些个人开发者就悲催了，还能好好玩耍吗？还好国内还是有比较好用的maven仓库，比如：阿里云的。地址：http://maven.aliyun.com/nexus/在maven的settings.xml，文件位置在maven的安装路径下，比如我本地的路径D:\Java\MAVEN\apache-maven-3.5.0\conf文件里配置mirrors的子节点，添加如下mirror123456&lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Eclipse中配置Maven]]></title>
    <url>%2F2017%2F04%2F20%2FEclipse%E4%B8%AD%E9%85%8D%E7%BD%AEMaven%2F</url>
    <content type="text"><![CDATA[注意：安装前请确认一下电脑是否安装了Maven，Maven的安装可以参考Maven安装一文。 说明安装前需先确认使用的Eclipse是否已经集成了Maven插件，如果已经集成，可以跳过步骤2。查看：Windowns-preference里面有没有maven选项，如图表示已经集成，可以跳过步骤2。 安装Maven插件填写Maven地址选择help菜单下面的install new software菜单项，点击Add。Name填写maven，Location填写maven在线安装地址，地址 http://download.eclipse.org/technology/m2e/releases。填写完点击OK 选择插件之后可以根据提示来进行安装。安装完成后需要重新启动Eclipse。安装完成重启之后我们可以看到菜单window-&gt;Preferences点击进入后会多出一栏Maven的菜单栏。 Maven插件配置添加Maven安装目录Windowns-preference-maven-installations，在出现的右边窗口中选择add按钮添加我们自己的Maven安装目录。点击Finish即可 选择目录勾选刚刚添加进来的maven目录 设置setting.xm文件点击User settings，Global Settings是全局的setting，所有用户可以访问，User Settings只有本用户才可以访问的。这里我选择Global Settings，添加setting.xml(位置在本机安装目录下面的conf文件下，当然用户也可以把setting.xml文件放在其它位置)，添加setting.xml文件之后eclipse会读setting.xml配置文件里面的仓库的存储位置，自动显示到Local Repository上，然后点击 OK，这样就完成了 eclipse上 maven 插件配置，就可以在eclipse中使用maven了。]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>eclipse</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git命令之用户名和邮箱地址]]></title>
    <url>%2F2017%2F04%2F20%2FGit%E5%91%BD%E4%BB%A4%E4%B9%8B%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1%E5%9C%B0%E5%9D%80%2F</url>
    <content type="text"><![CDATA[注意：本地使用Git的话需确保已经安装了Git，安装教程参考Git安装一文。 说明用户名和邮箱地址是本地Git客户端的一个变量，不随git库而改变。每次commit都会用用户名和邮箱纪录。 修改git config –global user.name “username” 修改/配置用户名git config –global user.email “email” 修改/配置邮箱global是非必须的，当带上global说明配置的信息为全局 查看git config user.name 查看用户名git config user.email 查看邮箱]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据库安装]]></title>
    <url>%2F2017%2F04%2F19%2FMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[下载选择版本win版本下载地址： https://dev.mysql.com/downloads/mysql/下载官方推荐的版本，点击Download 跳转下载页跳转到下载页面，选择如图下载版本，点击Download 开始下载点击 No thanks, just start my download. 开始下载 安装双击安装包 同意协议书同意协议书，打钩之后点击Next 选择安装类型安装类型有：Developer Default 默认安装类型；Server only 仅作为服务器；Client only 仅作为客户端；Full 完全安装类型；Custom 用户自定义安装类型。我们这里以自定义Custom安装为例，选择Custom之后点击Next 选择组件选择好需要安装的组件，点击Next 检查配置 开始安装点击Execute开始安装 安装完成安装完成之后点击Next 准备配置进入准备配置页面，点击Next 开始配置这里有三个选择：1.Developer Machine(开发机器)，个人用桌面工作站，占用最少的系统资源；2.Server Machine（服务器），MySQL服务器可以同其它应用程序一起运行，例如FTP、email和web服务器。MySQL服务器配置成使用适当比例的系统资源；3.Dedicated MySQL Server Machine（专用MySQL服务器）：该选项代表只运行MySQL服务的服务器。假定运行没有运行其它应用程序。MySQL服务器配置成使用所有可用系统资源根据自己情况选择即可，一般WEB服务器选择第二个，Server Machine即可。个人电脑安装选择第一个，Developer Machine比较好，选择完点击Next 配置密码为root用户配置密码，点击Next windows配置默认，点击Next 拓展配置默认，点击Next 申请服务配置点击Execute，等待执行完点击Finish 检查校验配置最后安装图片校验一下刚刚所有的配置，最后点击Finish即可 检验找到安装程序：打开之后输入密码，输入命令：show databases，即可以查看到所有的数据库了。]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL客户端安装之Navicat Premium]]></title>
    <url>%2F2017%2F04%2F19%2FMySQL%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85%E4%B9%8BNavicat%20Premium%2F</url>
    <content type="text"><![CDATA[破解版本(win32)链接：http://pan.baidu.com/s/1pL37Cld 密码：4sz4注：本文安装教程是使用官方版本，由于暂时未找到注册号，实际使用的是破解版本。 下载下载地址：https://www.navicat.com/download/navicat-premium选择符合自己电脑的版本，这里以win系统32位为例子。可以看到三个下载点，随便选择一个下载即可 安装双击安装包 欢迎界面点击Next 同意协议书同意协议书，点击Next 选择安装路径选择好安装路径，点击Next 选择菜单文件选择开始菜单名字，点击Next 生成图标勾选 Create a desktop icon ，创建桌面图标，点击Next 安装点击Install,开始安装 安装完成到此，已经安装完毕，点击Finish即可 使用前提确保已经安装了MySQL，如果没有安装过，参考MySQL数据库安装这篇文章 打开应用 填写信息如图填写数据库信息，点击 连接测试 可以测试是否成功，提示连接成功之后点击 确定 即可 连接 双击刚刚配置的 连接名 就可以连接到数据库了，具体要连接那个库，也是双击即可]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>Navicat Premium</tag>
        <tag>数据库客户端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL客户端安装之Navicat for Mysql]]></title>
    <url>%2F2017%2F04%2F19%2FMySQL%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85%E4%B9%8BNavicat%20for%20Mysql%2F</url>
    <content type="text"><![CDATA[下载下载地址：https://www.navicat.com/download/navicat-for-mysql选择符合自己电脑的版本，这里以win系统32位为例子。可以看到三个下载点，随便选择一个下载即可 安装双击安装包 欢迎界面点击Next 同意协议书同意协议书，点击Next 选择安装路径选择好安装路径，点击Next 选择菜单文件选择开始菜单名字，点击Next 生成图标勾选 Create a desktop icon ，创建桌面图标，点击Next 安装点击Install,开始安装 安装完成到此，已经安装完毕，点击Finish即可]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>Navicat Premium</tag>
        <tag>数据库客户端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git安装]]></title>
    <url>%2F2017%2F04%2F18%2FGit%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[下载win版本下载地址： https://git-for-windows.github.io/ 安装双击安装包 Next 选择安装路径选择好安装路径之后，点击Next 选择组件默认打钩，用户可以自行选择其它，这里多选择了在桌面生成图标，点击Next 配置名称设置开始菜单的名称，默认Git，点击Next 设置环境变量在“Adjusting your PATH environment”选项中，默认即可。点击 Next注：这个步骤选择第二项“Use Git from the Windows Command Prompt”， 这样在Windows的命令行cmd中也可以运行git命令了。这样会对以后的一些操作带来方便。 选择https传输方式 配置行结束标记保持默认“Checkout Windows-style, commit Unix-style line endings” 选择终端在终端模拟器选择页面,默认即可，配置后Git Gash的终端比较易用。然后点击“Next” 配置额外选择最后配置Git额外选择默认即可，然后点击“Install”开始安装，如果之前安装过旧版本，会先卸载然后再安装新版本 等待安装 安装完成到此，Git已经安装完毕，点击Finish即可 参考文章：https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins安装]]></title>
    <url>%2F2017%2F04%2F18%2FJenkins%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[下载下载地址： https://jenkins.io/download/选择适合自己电脑型号的版本，我这里下载的是win系统的版本。 安装解压解压，得到jenkins.msi安装包，双击运行 欢迎界面点击Next 选择安装路径选择好安装路径之后，点击Next 安装点击Install，开始安装 等待安装 安装完成到此，Jenkins 已经安装完成，点击Finish跳转到网页上进行配置 配置Jenkins server配置页面在2.6步骤的时候点击Finish会自动跳转到配置页面，如果不小心关闭了，在浏览器上输入 http://127.0.0.1:8080 自行打开 输入默认密码根据提示，找到密码输入，点击Continue 配置Jenkins server安装插件，这里选择推荐的插件进行安装，点击Install suggested plugins即可。当然用户也可以自定义选择插件进行安装，如果这一步选择插件有遗漏的话，后续也可以进行补充安装 等待配置等待安装，等待10分钟左右（电脑配置不同安装时间也不同） 设置用户和密码安装完之后，跳到配置用户和密码的界面，输入相关信息，设置用户和密码，点击 Sava and Finish 即可。如果这一步被跳过，默认用户名就是admin，默认密码就是3.2步骤的密码 配置成功到此，Jenkins server已经配置成功了。点击 Start using Jenkins 开启Jenkins之旅吧！ 访问Jenkins服务器登陆接下来在日常使用中，如果想打开Jenkins服务器，在浏览器输入 http://127.0.0.1:8080 ，填写配置的用户名和密码，点击登陆即可 Jenkins主界面登陆成功之后，就可以进入到Jenkins主界面了。欢迎来到新大陆！ Jenkins服务器维护命令打开控制台/命令行 - &gt;转到您的Jenkins安装目录。分别执行以下命令停止：jenkins.exe stop开始：jenkins.exe start重新启动：jenkins.exe restart]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SVN服务器、客户端的搭建和使用]]></title>
    <url>%2F2017%2F04%2F17%2FSVN%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[下载下载地址： http://subversion.apache.org/packages.html这里推荐VisualSVN server 服务端和 TortoiseSVN客户端搭配使用。选择适合自己电脑型号的版本，我这里下载的是win系统的32位版本。 VisualSVN server 服务端 TortoiseSVN客户端 安装VisualSVN server 服务端安装欢迎界面点击Next 协议书界面接受协议书，如图打钩，点击Next 选择组件默认，点击Next 选择版本选择标准版本，点击Standard Edition，进行svn服务器配置 配置选择好安装路径、仓库位置、服务端口以及备份地址 安装点击Install，开始安装 等待安装 安装结束点击Finish，到此VisualSVN server已经安装完毕 TortoiseSVN客户端安装欢迎界面点击Next 协议书界面点击Next 选择安装路径选择好安装路径之后，点击Next 安装点击Install，开始安装 等待安装 安装结束点击Finish，到此TortoiseSVN客户端已经安装完毕 svn服务器配置VisualSVN Server 主界面打开 VisualSVN Server.msc 应用 配置仓库选中仓库选择Respositories,右击，选择 Create New Respository 选择仓库类型选择创建FSFS格式的仓库 输入仓库名称 选择仓库结构这里使用推荐 设置仓库权限这里选择用户认证，需用使用配置的特定用户才有权限访问，点击Custom…添加用户 添加用户点击Add… 点击Create user… 输入配置的用户名和密码，配置完返回到配置页面 选择用户权限这里赋予的权限是可读/可写，点击确定 配置完成到这里仓库配置完成，点击Finish即可 查看仓库信息可以看到创建的仓库，点击Users也可以看到配置的用户信息，也可以在Users下面进行用户信息配置，这里就不做演示了 svn客户端使用选择仓库选中仓库之后右击，选择Copy URL to Clipboard,复制仓库地址 Checkout仓库选择位置选择好位置，在电脑的空白处单击右键，选择SVN Checkout… 选择Checkout位置复制刚刚copy的url，选择Checkout位置 用户验证这是非必须步骤，只有首次Checkout才需要填写用户名和密码，用户名和密码是上面所配置的 点击OK 文件上传新建新增文件在Checkout的路径下添加新增文件，这里以test.txt为例子 准备提交文件空白处右击，选择SVN Commit… 提交文件选择要提交的文件并填写注释，点击OK 提交成功提交文件成功，点击OK 查看仓库文件重新刷新客户端上的test仓库，即可看到刚刚提交的文件]]></content>
      <categories>
        <category>svn</category>
      </categories>
      <tags>
        <tag>svn</tag>
        <tag>VisualSVN server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JDK安装]]></title>
    <url>%2F2017%2F04%2F14%2FJDK%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[###下载下载地址： http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 如图，选择适合自己电脑型号的版本，我这里下载的是win系统的32位版本。 安装 双击下载之后的exe，按照提示完成安装，基本是傻瓜式的”下一步”，当然中间可以选择安装路径。注：安装完jdk之后同时会提示安装jre,也是同理安装。如图，这是安装效果： 环境变量配置新建JAVA_HOME系统变量计算机→属性→高级系统设置→高级→环境变量→系统变量→新建变量名字：JAVA_HOME路径（填写实际安装路径）：D:\Java\JDK\jdk1.8.0_121如图： 新建CLASSPATH系统变量变量名字：CLASSPATH路径： .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar（注意最前面有一点）如图： 编辑Path变量在变量最后面添加：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;在变量值最后输入 %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin（注意原来Path的变量值末尾有没有;号，如果没有，先输入；号再输入上面的代码）到此，JDK安装与环境变量配置。 验证运行cmd 输入 java -version ，若如图所示显示版本信息则说明安装和配置成功。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAVEN安装]]></title>
    <url>%2F2017%2F04%2F14%2FMAVEN%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[注意：安装前请确认一下电脑是否安装了JDK，JDK的安装可以参考JDK安装一文。 下载下载地址： http://maven.apache.org/download.cgi 如图，选择适合自己电脑的版本，我这里下载的是win系统的版本。 解压 环境变量配置新建系统变量需要新建M2_HOME和MAVEN_HOME系统变量步骤：计算机→属性→高级系统设置→高级→环境变量→系统变量→新建变量名：M2_HOME变量值（填写实际安装路径）：D:\Java\MAVEN\apache-maven-3.5.0MAVEN_HOME系统变量新增同上。注:Maven 说只是添加 M2_HOME , 但一些项目仍引用 Maven 的文件夹 MAVEN_HOME, 因此，为了安全也把它添加进去。如图： 编辑Path变量在变量最后面添加：%M2_HOME%\bin;在变量值最后输入 %M2_HOME%\bin;（注意原来Path的变量值末尾有没有;号，如果没有，先输入；号再输入上面的代码） 到此，MAVEN安装与环境变量配置。 验证运行cmd 输入 mvn -v,若如图所示显示版本信息则说明安装和配置成功。 修改仓库存位置maven 的仓库默认是放在本地用户的临时文件夹下面的 .m2 文件夹下的 repository 下，我的是在 C:\Users\bank_gz.m2\repository目录下。现在我们来修改将它指定到我们自己的路径下，我现在要将仓库指定到D:\Java\MAVEN\apache-maven-3.5.0\repo 目录下，只需要将maven安装路径下conf里面的seting.xml文件。我的是在D:\Java\MAVEN\apache-maven-3.5.0\conf\seting.xml。把下面注销的本地仓库打开改成如下：修改仓库位置原因：因为maven刚安装的时候我们可以看得到maven很小，只有最基本的东西，但我们一旦使用它，就会把我们的需要的东西都下载到仓库里面，随着我们需要调用的命令越多，仓库会越来越大，所以最好不要放在c盘，不然让系统越来越慢，且以后重装系统，还要再下一次。]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
</search>