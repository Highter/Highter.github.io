<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[神奇的早起-读书笔记]]></title>
    <url>%2F2020%2F09%2F08%2F%E7%A5%9E%E5%A5%87%E7%9A%84%E6%97%A9%E8%B5%B7-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[本书实用的方法很多，这里我就整理一下书本三个最核心内容。 part1：五步轻松实现早起 第一步：睡前进行积极的自我暗示。 早晨的第一个想法常常是前一天晚上的最后一个想法。每天晚上睡前，给自己积极的暗示。例如：不管我多久入睡，明天早上我一定准时早起，早起可以提高我的自律能力，让我有时间实现我的梦想。一日之计在于晨，每天做最好的自己。书中在文末提供了睡前自我肯定宣言。 第二步：将闹钟放到自己够不到的地方。 如果你早上不能自然醒来。把闹钟放到离床最远的位置，这样早上你就会强迫自己起床关闹钟，以免影响他人休息。通过起床运动这个步骤，身体容易苏醒。 第三步：到卫生间刷牙洗脸，让自己苏醒。 关掉闹钟后，直接到卫生间洗脸刷牙，做几分钟无意识但可以让身体苏醒的活动。 第四步：喝一大杯水。 起床第一时间补充水分很重要，我们休息了6-8小时没有喝水，身体处于轻微脱水状态，而脱水会导致身体疲劳。所以喝下一大杯水，给身体补充能量，身体的苏醒度进一步提升。 第五步：穿上晨练服出门锻炼。 part2：六步人生拯救计划 第一步：保持目的性心静 冥想可以缓解压力心静可以瞬间缓解你的压力，提高自我觉醒度，让你变得头脑明晰，每天都会专注自己的目标和优先事项。通过冥想、祈祷、沉思、深呼吸、感恩让自己心静下来。 第二步：真正的自我肯定。 自我肯定是最高效的工具，能够助你成为最好的自己，实现人生理想。不断第肯定，直到变成信仰。一旦信仰变成深刻的信念，一切将开始发生变化。主动为潜意识编程。五步写出充满力量的“自我肯定宣言”。（1）你真正想要什么？如：健康、好的情绪、财富等（2）为什么想要那些？（3）你必须成为什么样的人，才能得到你想要的？（4）你必须做什么，才能得到你想要的？（5）搜集励志名言。坚持从小事做起，循序渐进地进行。每天坚持自我肯定，例如，我的身体越来越棒，不停的重复暗示，你的潜意识会开始相信这些话，跟上你的步伐，最终实现你的目标。 人生拯救计划第三步：内心演练。 内心演练又称为“创造性具象化”，运用自己的想象力创造一幅有关人生具体行为或结果的蓝图，以取得积极的成果。内心演练的技巧是让你设计出自己想象的画面，让令人兴奋且没有极限的未来带你前进。演练三部曲：（1）深呼吸。（2）开始想象未来。（3）实践梦想。制作一个愿景板，写下你想成为怎样的人，你想做什么，你想过怎样的生活等。愿景板拉近梦想，让你充满干劲，再采取行动最终就能成功。 人生拯救计划第四步：开始锻炼。 每天早晨，哪怕只锻炼几分钟，也能大大提高你的精气神，激活大脑，帮助你在白天保持精力充沛。 人生拯救计划第五步：阅读。 阅读改变人生的捷径。阅读是改变人生的捷径。读书的关键是向专家学习，他们在各个领域已经做到了极致。因此实现梦想最快的方式就是模仿前辈的方法。通过每天阅读10页开始，获取自己想要的知识。量的积累必会带来质的飞跃。对于重要的书籍反复读，把作者的方法融于生活，真正活学活用。 人生拯救计划第六步：写日记。 每天花10分钟左右，写晨间日记，将自己的想法写出来，努力升华自己的思想境界。通过写日记，思维更加清晰，捕获灵感，回顾经验教训，检阅自己的进步。无论你写什么，每一个字都是一种疗愈，而这种疗愈是不需要花钱的。 part3：6分钟神奇的早起无论多忙，早晨我们都可以抽出6分钟来进行以下活动： 第一分钟：心静或冥想或感恩。 在开始忙碌的一天前，用一分钟的时间让自己心静。 第二分钟：大声朗诵自我肯定宣言。 大声朗诵每日的自我肯定宣言，告诉自己拥有无限的潜能。然后思考今天的当务之急是什么。 第三分钟：尽情地想象未来。 闭上眼睛或看着愿景板，进行具象化训练。想象自己完成目标，跟家人幸福地旅游。 第四分钟：写下让自己感激的事情。 用1分钟写下让你感恩的事物、自豪的事情，以及你承诺当天要做到的事情。这样能让你充满力量和斗志。 第五分钟：静静地读一页书。 拿起一本励志书，用1分钟的时间读1-2页。如果从书中学到一个新观点，可以运用到生活中，提升你的工作表现或改善你的人际关系。 第六分钟：动起来。 站起来，最后一分钟用来锻炼身体。你可以跳绳、做俯卧撑或跑步等，重点是提高你的心率，激发身体机能，并保持专注。 总结：其实我们每个人都有早起的经历，不知不觉也尝到早起的好处，但是我真的很难想象早起也可以变得这么有规律可循，早起可以如此利用，早起可以改变人的一生…书中作者本人大起大落，在自己人生低谷的时候，通过早起的方式逐步改变自己人生，毅力和经历实在让人佩服。相信每个人都想脱颖而出，那就让我们开始行动起来吧，坚持早起，坚持执行计划，拯救自己的人生，厚积薄发！]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>book</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[哈佛医生超强学习法-读书笔记]]></title>
    <url>%2F2019%2F02%2F24%2F%E5%93%88%E4%BD%9B%E5%8C%BB%E7%94%9F%E8%B6%85%E5%BC%BA%E5%AD%A6%E4%B9%A0%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[整体目录PART 1 卓有成效的人设定目标的技巧1. 从目标开始反向思考如作者举的例子，导航要设置起始地和目的地，人也要明确的自己的人生目标。 2. 制定灵活的目标采用SMART原则：Specific(更具体的)、Measurable(可评价的)、Achievable(可实现的)、Realistic(现实的)和Time-bound(期限内可达成的)。 eg.灵活目标：为了有教养而读书eg.非灵活目标：为了有教养，每周读两本书 3. 将目标分为7个方面目标分类：工作(职业)、家庭、经济(金钱)、健康、教育(启发自我)、兴趣、其他(志愿者等)。作者建议我们用30分钟进行头脑风暴：列出100个目标 4. 制定10年期目标分为短期(1~2年)、中期(5年)和长期目标(10年)，并建议公共目标，来自周围的评价会产生强有力的动力 5.定期更新简历建议3个月更新一次 6.将目标和未来的理想相结合应用沉没成本(SUNK Cost)，制定目标不要受过去的影响 7. 赋予目标连贯性确保每天有一个小时的学习时间 8. 形成目标组合利用目标组合，减低风险 9. 不是“A 或 B”，而是“A 和 B”不需要把专业限制在某一方面 10. 以目标人物为榜样榜样人物的曲折道路可以成为我们最值得信赖的捷径 PART 2 卓有成效的人管理时间和提高专注力的技巧11. 适当进行时间管理时间管理是指“能挤出多少时间为目标而努力” 12. 将复利的思考方式引入时间管理时间能产生复利价值 13. 通过治疗类选法确定优先顺序红：必须尽早处理(1~3天) 黄：一周之内 绿：完全不紧急 黑：已经结束 14. 为了效果显著，需熟练安排时间学习效率=学习成果/学习时间 如何以较少的时间取得更好的学习成果？①如果学得厌烦了，换别的学科：建议一个小时更换的频率②差异时间的使用方法：早点上班避开高峰、早点完成工作早点下班回家等挤出学习时间③反复进行短时间学习 15. 巧用零碎时间高效学习重要不是学习时间“长”，而是学习时间“多”。 eg1：有效利用移动中和外出的零碎时间准备好工具，可以是手机、书、kindle、平板，在等电梯、等公交、搭公交、搭地铁等都可以看书、听听力、回复邮件等 eg2：有效利用办公室和家里的零碎时间| | 办公室 | 家里 || —— | ———————- | :————————— || 5分钟 | 删除邮件、todo清单确认 | 制作购物清单、列出待处理事情 || 10分钟 | 桌面整理、邮件回复 | 叠衣服 || 20分钟 | ppt制作、构建报告 | 打扫卫生 | 16. 周末不安排学习同理肌肉锻炼，每天学习一点点，周末可以适当放松 17. 减少消遣时间①邮件：关闭提示，无需一直关注②上网：关闭网络，需要再开启③同事：有意减少无谓的消遣 18. 养成专注的习惯人的专注力最高可持续20分钟，可通过“习惯”提高专注力。 eg.医生手术前要洗手、看书前喝coffee 19. 避免一心多用根据学习和工作的种类，区分多重任务处理和专注于单项处理。 eg.| | 可一心多用 | 不可一心多用 | 备注 || ————– | ———- | ———— | —————————— || 开车打电话 | | √ | 开车和打电话需要专注 || 回复邮件打电话 | | √ | 回复邮件和店电话需要专注 || 吃饭回复邮件 | √ | | 吃饭不需要专注，可专注回复邮件 || 吃饭聊天 | √ | | 吃饭不需要专注，可专注聊天即可 | 20. 理解专注的生物钟“考试之前，总觉得提不起精神学习”“不到最后期限，就没有动力”所以需要准确把握自己的“心理截止时间”，根据自己的“心理截止时间”来制定目标。 21. 通过睾酮提高专注力保持自信的姿态-&gt;睾酮分泌量增加-&gt;记忆力和专注力增加 22. 设定期限设定期限，在短期内集中精力学习，有助于提高专注力 23. 控制困意摄入碳水化合物之前先吃蔬菜 24. 将健康管理进行到底①消灭情绪波动：不以他人的评价来定自己的悲喜②别像优秀的人那样加班：每天固定学习，保持持续，不要透支身体③将休假写入计划中：兼顾学习、工作和游玩 25. 有意识地留出清扫时间保持不同于平日的打扫卫生时的状态，就有机会发现存在的问题 26. 将 10% 的时间用于新事情参考google的 70/20/10分配法则，记住崭新的想法来自10%的时间 PART 3 卓有成效的人的学习技巧27. 将“LEAN”思考方式引入学习①“将目标可视化”，明确“应该做什么”和“不能做什么”②“减少无用功”，挤出时间，聚焦于应该做的事情上③不断“改善”，锤炼学习过程④将这一过程“习惯化”⑤以长期展望为基础的同时发现“小胜利”，保持高昂的动力，形成LEAN的良性循环 28. 将目标和任务可视化将自己设定的目标和任务张贴在固定位置，就可以随时进行确认，保持高效和持续性 29. 通过波纹效应增加动力对外公开自己的目标，具有众多好处 30. 不过于追求完美以80%为目标，带着速度来完成目标，减少无用功时间 31. 高效率学习真题集和教科书12345678910111213st=&gt;start: 开始学习e=&gt;end: 结束学习op1=&gt;operation: 标记Xop2=&gt;operation: 标记△op3=&gt;operation: 标记Ocond1=&gt;condition: 看不懂cond2=&gt;condition: 费力理解st-&gt;cond1cond1(yes)-&gt;op1cond1(no)-&gt;cond2cond2(yes)-&gt;op2cond2(no)-&gt;op3-&gt;e 32. 不从习题集的第一页开始优先学习重要的内容和不擅长的内容 33. 巧用荧光标记做标记，增加专注力 34. 利用博客锻炼表达力尝试用英文写出来，单做是写作 35. 每天跟进 TO DO 清单即使少做也不能不做 36. 用 FIFO 方法管理 TO DOeg.看完这本书(2018年3月5日开始，2018年3月15日截止)并不是所有的todo都是适合FIFO，某些场景适合LIFO，比如考试前复习(因为最后听的记忆更加清晰) 37. 在学习上不吝啬钱财教育是最有效率的投资 38. 形成资质跟学习没有直接关系的经验和读书，有利于提高人的资质 定下读书目标①每月读6本②浏览话题书③确定主题：预定学习目标、学会速读 PART 4 从哈佛、MBA 学到的学习法39. 尽早获得信任取得周围人的信任，更容易取得良好成果 40. 巧用人脉人脉是实力的一部分：自己化身为平台eg.成为某活动的组织者 41. 目标不是竞争而是相互协作参考“囚徒困境”，通过协作，提高彼此的利益的总价值 42. 消化海量知识掌握适合自己的记忆法：故事记忆、提示纸记忆 43. 重视预习相比复习，最好在课上牢记相应内容 44. 通过发言磨炼自己的见解和思维积极发言、努力磨炼自己发表主要见解的能力 45. 享受海外留学留学是打开未来之门的重要机会 46. 远离舒适空间自己要挑战新环境 PART 5 从零开始的英语学习法47. 成为全球化人才磨炼核心技能之外，也要掌握英文 48. 早期开始便要设定具体目标做个有准备的人 49. 非“正确英语”也可以沟通只要意思相通，就是“会说英语” 50. 具体描述学习英语的目的明确学习英语的目的，集中精力去实现它 51. 牢记目标，只学习必要的技能成果和时间不成正比例，实际上是呈阶梯状上升的 52. 确保英语学习时间有效地分开使用零碎时间和整块学习的时间，最好保证早上有学习英语的时间 53. 做 TOEFL 领跑运动员定下目标，提前开始学习 54. 跟遗忘曲线战斗，牢记英语单词参考艾宾浩斯的遗忘曲线，通过大量阅读英语文章来吸收英语单词 55. 用英语上网通过英语上网锻炼英语的速读能力THE WALL STREET JOURNALTHE ECONOMISTUSA TODAYFINANCIAL TIMESNatureATP World Tour 56. 用 10-K 锻炼阅读技巧google搜索”Amazon 10-K”,通过英文决算报告书，能够掌握海外企业的商业模式及商务词汇英文决算报告书 57. 通过电影和 TED 磨炼听力技巧推荐TED 58. 演讲要有表达意识①英语做自我介绍②用英文写简历和Linkedln，并定期更新 59. 制作英语简历用英语盘点自己的经验 60. 英语会话中不要“不懂装懂”如有不懂得内容就要鼓起勇气再问一次 61. 使用谷歌学习书写写好的英语文章再逆向翻译成母语，确保正确 62. 使用模板写英文邮件找模板回复英文邮件，不要浪费时间 63. 推荐 TOEFL 用书相比TOEIC更推荐TOEFL PART 6 卓有成效的人不断成长的技巧64 通过成功体验来保持动力积累小小的成功经历、形成自信是完成目标的第一步 65 利用先发优势正因为没有先例，才存在机会 66 体验超越界限只有体验过超越界限，才能够超越自己设定的界限 67 一边想象着合格的自己一边学习具体的形象有助于提高动力 68 遵守和自己的约定抛弃“被动意识”，保持“主人翁意识” 69 注意不同的衡量标准放眼成绩和业绩以外的世界，不要成为“土霸王” 70 为组织做出贡献做贡献也要设定具体的数值目标。一年之内用1%的时间，365*1%就是3天左右 71 不以金钱来定义成功成功是指学习新事物、感悟成长 72 即使失败，也要积极思考做个有弹性的人：①冷静地接受残酷的现实②即使失败，也不会成为受害者，而是能发现其存在价值③弹性思考 处理挫折的方法：①不苦恼②告别过去、面向未来③从挫折中学习 总结：即使失败，也要积极思考 提炼总结参考：https://www.jianshu.com/p/3500f3b5b4df 1.要有“挑战”意识要牢记不要说“不能”，“很难”这样的消极语言。要学习美国人在面临困难时的态度。学会说“It’s Challenging”（这很有挑战），让自己不断激励自己前进。 2.时间复利要让自己做有成长的事情，身居可以提升自己的职场上，只有这样才能让技能获得时间的复利。 3.专注的生物钟越忙越专注，准确把握自己的“心理截止日期”，同时拥有几个目标，同时处理几项工作，反而能够保持高度的专注力。 4.控制困意通过减少碳水化合物的摄入量，先吃蔬菜，再吃碳水化合物，能有效防止饭后的困意。饭后困意来袭，一是为了消化食物，血液集中到消化器官，流向大脑的血液循环减少。另一就是饭后的低血糖。吃饭时血糖上升，所以降低胰岛素这一血糖值的荷尔蒙会分泌过剩，带来的结果就是低血糖。 5.70/20/10分配法则任何领域，70%时间用于核心专业事物，20%时间用于拓展核心事物，10%用于完全新的事物。而崭新的想法通常源自10%的时间。70%时间读专业书，20%时间读专业拓展的书，10%读完全非专业的小说。大体如此。 6.LEAN学习法源于丰田汽车总结出的用于生产过程的高效思考方法。即尽量减少“无用功”，通过高效率挤出更多时间。LEAN学习法5个要点①“将目标可视化”，明确“应该做什么”和“不能做什么”。②“减少无用功”，挤出时间，聚焦于应该做的事情上。③不断“改善”，锤炼学习过程。④将这一过程“习惯化”。⑤以长期展望为基础的同时发现“小胜利”，保持高昂的动力，形成LEAN的良心循环。 7.波纹效应小石头落进水面的时候，能看到向外扩展开来的波纹。对外公开自己的目标，展示自己的成功，在感兴趣的人之间产生波纹效应，令其网络化，就能更加增加自己的动力。 8.先进先出法则管理TO DO 清单时，在任务的旁边一定要写上任务开始时间和截止时间，学习内容，任务目标是如何产生、如何进行管理、按照什么顺序完成就可以通过“先进先出”法则进行管理。 9.案例研究法人类的大脑会忘记单词等较琐碎的信息，但难以忘记信息和信息结成的信息网。学习案例研究，不能只背诵，还要记住当时的场景和感情。要一边在自己的大脑中构建故事情节，一边学习。 10.挑战与界限机会存在于“和别人不同”的地方。因为没有先例，才存在机会。正因为挑战了做不到的事情，所以能做的事情才会越来越多，挑战的环境促进了个人成长。只有体验过超越界限，才能够超越自己设定的界限。要有将“我可能不行”转换为“无论何时我都能完成”的精神。]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>book</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac常用命令]]></title>
    <url>%2F2018%2F09%2F09%2Fmac%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[快捷键 光标左移：Ctrl + B 光标右移：Ctrl + F 光标至行首：Ctrl + A 光标至行尾：Ctrl + E 删除至行尾：Ctrl + K 清屏：Ctrl + L 搜索历史命令：Ctrl + R 选中即复制，单击滚轮粘贴 命令$ man1$ man mkdir 作用：查阅某个命令的手册页，q 退出英文：Manual pages $ sudo作用：通过安全的方式使用特殊的权限运行程序（通常为系统的超级用户）英文：substitute user do 或 superuser do $ cd作用：用于改变工作目录英文：change directory $ mkdir作用：新建目录英文：make directories $ pwd作用：输出当前工作目录的绝对路径英文：print working directory $ ls作用：列出文件英文：list segment $ curl作用：利用 URL 语法在命令行下工作的文件传输工具英文：[kɝl] 或 [kə:l]使用： 12$ curl www.foo.com #查看网站源码$ curl -o [文件名] www.sina.com #下载 $ cat参数：-n 对所有行显示行号使用：12345678910#显示文件全部内容$ cat foo.txt#创建文件并进入编辑模式$ cat &gt; filename#对文件追加内容$ cat &gt;&gt; filename#合并文件内容$ cat foo.txt bar.txt &gt; foobar.txt more功能：类似 cat，以一页一页的显示方便使用者逐页阅读使用：下一页按 Space，上一页按 b，退出 q，vi 编辑器模式按 v， $ less功能：类似 more，使用：退出 Q $ which作用：在环境变量 $PATH 设置的目录里查找符合条件的文件使用： 1$ which bash #输出 /bin/bash $ file作用：辨识该文件的类型参数：-b 不显示文件名称使用： 12$ file foo.txt#输出 foo.txt: UTF-8 Unicode text who作用：显示系统中有哪些使用者 $ cp作用：复制文件或目录参数：-r 若源文件是一个目录文件，此时将复制该目录下所有的子目录和文件使用： 123$ cp –r foo/ newfoo#将当前目录&quot;foo/&quot;下的所有文件复制到新目录&quot;newfoo&quot;下#注意：用户使用该指令复制目录时，必须使用参数&quot;-r&quot; $ mv作用：为文件或目录改名、或将文件或目录移入其它位置使用： 123$ mv foo bar #将文件foo更名为bar$ mv foo/ bar #将foo目录放入bar目录中#如果bar目录不存在，则该命令将foo改名为bar $ rm作用：删除一个文件或者目录，且无法恢复参数：-r 删除目录时必需参数；-i 删除前逐一询问确认使用： 123$ rm foo.txt #删除一般文件 $ rm -r foofolder #删除目录$ rm -r * #删除当前目录下的所有文件及目录 $ open作用：使用 Finder 打开文件目录或程序使用： 12$ open /Applications/Safari.app/ #打开应用$ open . #打开当前目录。 $ history作用：显示指定数目的历史命令使用： 12$ history #列出所有历史命令$ history 10 #列出最近的10条历史命令 $ touch作用：修改文件或者目录的时间属性，若文件不存在，新建文件使用： 123$ ls -l testfile #使用ls命令查看文件的属性 $ touch testfile #修改文件时间属性为当前系统时间 $ ls -l testfile #查看文件的时间属性 $ lsof1$ lsof -i:9000 #使用lsof查看端口占用情况]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis安装[mac]]]></title>
    <url>%2F2018%2F09%2F09%2Fredis%E5%AE%89%E8%A3%85-mac%2F</url>
    <content type="text"><![CDATA[redis简介redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)和zset(有序集合)。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。Redis 是一个高性能的key-value数据库。 redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。它提供了Python，Ruby，Erlang，PHP客户端，使用很方便。 下载打开官网：https://redis.io/ Download—Stable—Download4.0.11，下载最新稳定版，这里是4.0.11 安装下载完成后，打开命令行工具，执行解压命令 1234$ tar -zxvf redis4.0.11.tar.gz #解压$ cd redis4.0.11 #进入目录$ sudo make test #测试编译$ sudo make install #安装redis 若执行’sudo make test’报错如下1[exception]: Executing test client: couldn&apos;t execute &quot;src/redis-benchmark&quot;: no such file or director 则先执行以下命令12$ sudo make distclean$ sudo make 启动Redis1redis-server 配置在redis目录下建立bin，etc，db三个目录 123sudo mkdir binsudo mkdir etcsudo mkdir db 把/src目录下的mkreleasehdr.sh，redis-benchmark， redis-check-rdb， redis-cli， redis-server拷贝到bin目录1cp src/mkreleasehdr.sh src/redis-benchmark src/redis-check-rdb src/redis-cli src/redis-server ../bin/ 拷贝 redis.conf 到 etc下 1cp redis.conf etc/ 修改redis.conf 123456789101112131415161718192021222324252627282930313233343536#修改为守护模式daemonize yes#设置进程锁文件pidfile /Users/yangjianwei/Documents/software/Redis/redis-4.0.11/redis.pid#端口port 6379#客户端超时时间timeout 300#日志级别loglevel debug#日志文件位置logfile /Users/yangjianwei/Documents/software/Redis/redis-4.0.11/logs/log-redis.log#设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库iddatabases 16##指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合#save &lt;seconds&gt; &lt;changes&gt;#Redis默认配置文件中提供了三个条件：save 900 1save 300 10save 60 10000#指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，#可以关闭该#选项，但会导致数据库文件变的巨大rdbcompression yes#指定本地数据库文件名dbfilename dump.rdb#指定本地数据库路径dir /Users/yangjianwei/Documents/software/Redis/redis-4.0.11/db/#指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能#会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有#的数据会在一段时间内只存在于内存中appendonly no#指定更新日志条件，共有3个可选值：#no：表示等操作系统进行数据缓存同步到磁盘（快）#always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）#everysec：表示每秒同步一次（折衷，默认值）appendfsync everysec 启动服务1redis-server /Users/yangjianwei/Documents/software/Redis/redis-4.0.11/etc/redis.conf 查看版本1redis-cli -v 查看日志1tail -f /Users/yangjianwei/Documents/software/Redis/redis-4.0.11/logs/log-redis.log 打开redis客户端操作1redis-cli #客户端连接]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zookeeper安装配置[mac]]]></title>
    <url>%2F2018%2F08%2F24%2Fzookeeper%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-mac%2F</url>
    <content type="text"><![CDATA[安装zookeeper支持brew安装。1234567891011Hunter-Mac:Highter.github.io yangjianwei$ brew info zookeeper==&gt; Downloading https://homebrew.bintray.com/bottles/zookeeper-3.4.12.high_sierr######################################################################## 100.0%==&gt; Pouring zookeeper--3.4.12.high_sierra.bottle.tar.gz==&gt; CaveatsTo have launchd start zookeeper now and restart at login: brew services start zookeeperOr, if you don't want/need a background service you can just run: zkServer start==&gt; Summary🍺 /usr/local/Cellar/zookeeper/3.4.12: 242 files, 32.9MB 安装后，在/usr/local/Cellar/zookeeper/目录下，已经有了缺省的配置文档。1234Hunter-Mac:Highter.github.io yangjianwei$ ls /usr/local/Cellar/zookeeper/3.4.12/INSTALL_RECEIPT.json README.md includeLICENSE.txt bin libNOTICE.txt homebrew.mxcl.zookeeper.plist libexec 启动服务12345678910111213Hunter-Mac:Highter.github.io yangjianwei$ zkServerZooKeeper JMX enabled by defaultUsing config: /usr/local/etc/zookeeper/zoo.cfgUsage: ./zkServer.sh &#123;start|start-foreground|stop|restart|status|upgrade|print-cmd&#125;Hunter-Mac:Highter.github.io yangjianwei$ zkServer startZooKeeper JMX enabled by defaultUsing config: /usr/local/etc/zookeeper/zoo.cfgStarting zookeeper ... STARTEDHunter-Mac:Highter.github.io yangjianwei$ zkServer statusZooKeeper JMX enabled by defaultUsing config: /usr/local/etc/zookeeper/zoo.cfgMode: standalone zkCli工具使用查看zookeeper运行及状态。安装后，可以看到zookeeper提供了zkCli等工具进行. 1234567891011121314151617Hunter-Mac:Highter.github.io yangjianwei$ zkCliConnecting to localhost:2181Welcome to ZooKeeper!JLine support is enabledWATCHER::WatchedEvent state:SyncConnected type:None path:null[zk: localhost:2181(CONNECTED) 0] ls[zk: localhost:2181(CONNECTED) 1] ls /[zookeeper][zk: localhost:2181(CONNECTED) 2] ls /zookeeper[quota][zk: localhost:2181(CONNECTED) 3] ls /zookeeper/quota[][zk: localhost:2181(CONNECTED) 4] quitQuitting...]]></content>
      <categories>
        <category>zookeeper</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7搭建nexus maven私服]]></title>
    <url>%2F2017%2F07%2F25%2Fcentos7%E6%90%AD%E5%BB%BAnexus-maven%E7%A7%81%E6%9C%8D%2F</url>
    <content type="text"><![CDATA[前提准备jdk安装参考CentOS安装JDK maven安装参考MAVEN安装（centos7） 下载下载地址：https://www.sonatype.com/download-oss-sonatype这里我使用 wget 命令下载，操作路径 /data,如下1[root@localhost data]# wget http://download.sonatype.com/nexus/3/latest-unix.tar.gz 安装配置解压123[root@localhost data]# cp latest-unix.tar.gz /usr/local/[root@localhost data]# cd /usr/local/[root@localhost local]# tar -zxvf latest-unix.tar.gz 配置环境变量1[root@localhost local]# vim /etc/profile 添加内容如下123#set nexusexport NEXUS_HOME=/usr/local/nexus-3.4.0-02export PATH=$PATH:$NEXUS_HOME/bin 最后使配置文件生效1[root@localhost local]# vim /etc/profile 启动前台启动：./bin/nexus console以后台进程启动：./bin/nexus start查看输出的日志：tail -f logs/wrapper.log12[root@localhost local]# cd nexus-3.4.0-02/[root@localhost nexus-3.4.0-02]# ./bin/nexus start 提示：1234WARNING: ************************************************************WARNING: Detected execution as &quot;root&quot; user. This is NOT recommended!WARNING: ************************************************************Starting nexus 修改nexus安装目录bin/nexus.rc文件12[root@localhost nexus-3.4.0-02]# vim /usr/local/nexus-3.4.0-02/bin/nexus.rc #添加内容：run_as_user="root" 开启端口开启端口：1[root@localhost nexus-3.4.0-02]# firewall-cmd --zone=public --add-port=8081/tcp --permanent 重启防火墙：1[root@localhost nexus-3.4.0-02]# firewall-cmd --reload 访问私服nexus3.X的默认端口是:8081nexus3.X的默认账号是:adminnexus3.X的默认密码是:admin123nexus3.X搭建的maven私服的本地访问地址是:http://私服的ip:8081**例如我的就是:http://192.168.11.88:8081/ 优化设置开机自启动123[root@localhost nexus-3.4.0-02]# ln -s /usr/local/nexus-3.4.0-02/bin/nexus /etc/init.d/nexus3[root@localhost nexus-3.4.0-02]# chkconfig --add nexus3[root@localhost nexus-3.4.0-02]# chkconfig nexus3 on 修改运行nexus3所使用的用户12[root@localhost nexus-3.4.0-02]# vim /usr/local/nexus-3.4.0-02/bin/nexus.rc # 修改内容：run_as_user="root" 修改启动时jdk版本12[root@localhost nexus-3.4.0-02]# vim /usr/local/nexus-3.4.0-02/bin/nexus#修改内容：INSTALL4J_JAVA_HOME_OVERRIDE=/usr/local/java/jdk1.8.0_121 修改默认端口12[root@localhost nexus-3.4.0-02]# vim /usr/local/nexus-3.4.0-02/etc/nexus-default.properties #修改内容：application-port=8282 修改nexus3数据以及相关日志的存储位置1[root@localhost etc]# vim /usr/local/nexus-3.4.0-02/bin/nexus.vmoptions 这里采用默认即可123-XX:LogFile=../sonatype-work/nexus3/log/jvm.log-Dkaraf.data=../sonatype-work/nexus3 -Djava.io.tmpdir=../sonatype-work/nexus3/tmp 启动命令现在我们可以启动nexus3使用如下命令：1[root@localhost nexus3]# /etc/init.d/nexus3 start 更多详情，请关注我的博客https://highter.github.io]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用的开发资源地址]]></title>
    <url>%2F2017%2F07%2F25%2F%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BC%80%E5%8F%91%E8%B5%84%E6%BA%90%E5%9C%B0%E5%9D%80%2F</url>
    <content type="text"><![CDATA[svn插件（可集成在eclipse、myeclipse等）svn插件包下载: http://subclipse.tigris.org/servlets/ProjectDocumentList?folderID=2240]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JedisClusterMaxRedirectionsException：Too many Cluster redirections]]></title>
    <url>%2F2017%2F07%2F23%2FJedisClusterMaxRedirectionsException%EF%BC%9AToo%20many%20Cluster%20redirections%2F</url>
    <content type="text"><![CDATA[在测试redis集群的时候遇到错误：redis.clients.jedis.exceptions.JedisClusterMaxRedirectionsException: Too many Cluster redirections? 错误原因：创建redis集群的时候使用的命令是：./redis-trib.rb create –replicas 1 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 但是由于Java客户端在集群之外所以是这样写的：123456789101112131415161718192021222324 @Testpublic void redisTest88()&#123; HashSet&lt;HostAndPort&gt; nodes = new HashSet&lt;HostAndPort&gt;(); boolean add = nodes.add(new HostAndPort("192.168.11.88", 7000)); nodes.add(new HostAndPort("192.168.11.88", 7001)); nodes.add(new HostAndPort("192.168.11.88", 7002)); nodes.add(new HostAndPort("192.168.11.88", 7003)); nodes.add(new HostAndPort("192.168.11.88", 7004)); nodes.add(new HostAndPort("192.168.11.88", 7005)); nodes.add(new HostAndPort("192.168.11.88", 7006)); JedisCluster cluster = new JedisCluster(nodes); System.out.println("cluster:"+cluster); String string = cluster.get("key1"); System.out.println(string); try &#123; if(cluster != null)&#123; cluster.close(); &#125; &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125;&#125; host地址不匹配，导致Too many Cluster redirections 解决方法：1)将每个节点下aof、rdb、nodes.conf本地备份文件删除；2)启动所有redis节点；3)重新构建集群使用：./redis-trib.rb create –replicas 1 192.168.11.88:7001 192.168.11.88:7002 192.168.11.88:7003 192.168.11.88:7004 192.168.11.88:7005 192.168.11.88:7006]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ安装[centos]]]></title>
    <url>%2F2017%2F07%2F23%2FRabbitMQ%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[MQ 全称为 Message Queue, 消息队列（MQ）是一种应用程序对应用程序的通信方法。应用程序通过读写出入队列的消息（针对应用程序的数据）来通信，而无需专用连接来链接它们。RabbitMQ 是一个在 AMQP 基础上完整的，可复用的企业消息系统。他遵循 Mozilla Public License 开源协议。本文操作路劲在/data目录下。 安装 Erlang1[root@localhost data]# sudo yum install erlang 安装RabbitMQ Server下载地址：https://www.rabbitmq.com/download.html12[root@localhost data]# rpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc[root@localhost data]# yum install rabbitmq-server-3.6.10-1.el7.noarch.rpm 启动服务设置开机启动chkconfig rabbitmq-server on启动service rabbitmq-server start停止service rabbitmq-server stop 安装 web 管理页面1[root@localhost data]# rabbitmq-plugins enable rabbitmq_management 安装完成后就可以使用http://ip:15672进行访问了。web 页面需要用户，所以下边就需要对用户进行配置 设置开机启动:chkconfig rabbitmq-server on 用户管理用户列表rabbitmqctl list_users新增用户rabbitmqctl add_user Username Password删除用户rabbitmqctl delete_user Username修改密码rabbitmqctl change_password Username Newpassword注意：用户添加完成后还不能登录 web 页面，还需要给用户添加角色 用户角色超级管理员(administrator)可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。监控者(monitoring)可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)策略制定者(policymaker)可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。但无法查看节点的相关信息。普通管理者(management)仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。其他无法登陆管理控制台，通常就是普通的生产者和消费者。 了解了这些后，就可以根据需要给不同的用户设置不同的角色，以便按需管理。 赋予用户角色:rabbitmqctl set_user_tags User Tag一个用户可以有多个角色，多个 tag 使用空格分开即可。赋予角色之后登陆效果如图： 更多详情，请关注我的博客https://highter.github.io/]]></content>
      <categories>
        <category>rabbitmq</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7安装consul]]></title>
    <url>%2F2017%2F07%2F23%2Fcentos7%E5%AE%89%E8%A3%85consul%2F</url>
    <content type="text"><![CDATA[下载下载地址为 https://www.consul.io/downloads.html 选择符合自己电脑的版本下载，我的是linux-64位，下载之后移动到 /data路径下 安装解压12[root@localhost data]# unzip consul_0.8.5_linux_amd64.zip[root@localhost data]# mv consul /usr/local/bin/ 解压后只有唯一的一个consul文件，将其放到$PATH便可运行。 验证安装1[root@localhost data]# consul 如下图表示成功 启动1[root@localhost data]# consul agent -dev 在浏览器中输入 http://127.0.0.1:8500 访问。如果想要指定ip访问，运行1[root@localhost data]# consul agent -dev -client 192.168.11.88 在浏览器中输入 http://192.168.11.88:8500 访问 停止ctrl+c 更多详情，请关注我的博客https://highter.github.io/]]></content>
      <categories>
        <category>consul</category>
      </categories>
      <tags>
        <tag>consul</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring boot中使用过滤器filter]]></title>
    <url>%2F2017%2F06%2F16%2FSpring%20boot%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8filter%2F</url>
    <content type="text"><![CDATA[传统JavaEE传统的javaEE增加Filter是在web.xml中配置，如以下代码：123456789101112&lt;filter&gt; &lt;filter-name&gt;TestFilter&lt;/filter-name&gt; &lt;filter-class&gt;com.higher.filter.TestFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;TestFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;init-param&gt; &lt;param-name&gt;paramName&lt;/param-name&gt; &lt;param-value&gt;paramValue&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter-mapping&gt; spring boot中@Bean方式(旧方法)自定义filter1234567891011121314151617181920212223package com.higher.filter;import javax.servlet.*;import java.io.IOException;public class TestFilter implements Filter &#123; @Override public void init(FilterConfig filterConfig) throws ServletException &#123; &#125; @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123; System.out.println("TestFilter"); &#125; @Override public void destroy() &#123; &#125;&#125;​` 使用注解@Bean在Application.java中添加​12345678910@Bean public FilterRegistrationBean testFilterRegistration() &#123; FilterRegistrationBean registration = new FilterRegistrationBean(); registration.setFilter(new TestFilter()); registration.addUrlPatterns("/*"); registration.addInitParameter("paramName", "paramValue"); registration.setName("testFilter"); registration.setOrder(1); return registration;&#125; spring boot中@WebFilter方式(新方法-推荐)自定义filter12345678910111213141516171819202122232425262728293031323334package com.higher.filter;import java.io.IOException;import javax.servlet.Filter;import javax.servlet.FilterChain;import javax.servlet.FilterConfig;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.annotation.WebFilter;import org.springframework.core.annotation.Order;@Order(1)@WebFilter(filterName = "testFilter ", urlPatterns = "/*")public class TestFilter implements Filter&#123; @Override public void destroy() &#123; // TODO Auto-generated method stub &#125; @Override public void doFilter(ServletRequest arg0, ServletResponse arg1, FilterChain arg2) throws IOException, ServletException &#123; // TODO Auto-generated method stub System.out.println("TestFilter"); &#125; @Override public void init(FilterConfig arg0) throws ServletException &#123; // TODO Auto-generated method stub &#125; &#125; 其中@Order注解表示执行过滤顺序，值越小，越先执行 使用注解@ServletComponentScan1234567@SpringBootApplication@ServletComponentScanpublic class ApiApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ApiApplication.class, args); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAVEN安装(centos7)]]></title>
    <url>%2F2017%2F06%2F16%2FMAVEN%E5%AE%89%E8%A3%85(centos7)%2F</url>
    <content type="text"><![CDATA[注意：安装前请确认一下电脑是否安装了JDK，JDK的安装可以参考JDK安装一文。操作路径 /data/ 下载123[root@localhost data]# mkdir maven[root@localhost data]# cd maven/[root@localhost maven]# wget http://apache.fayea.com/maven/maven-3/3.5.0/binaries/apache-maven-3.5.0-bin.tar.gz 解压1[root@localhost maven]# tar -zxvf apache-maven-3.5.0-bin.tar.gz 环境变量配置1[root@localhost maven]# vim /etc/profile 添加内容如下：123#set mavenexport M2_HOME=/data/maven/apache-maven-3.5.0export PATH=$PATH:$M2_HOME/bin 验证12345678[root@localhost maven]# source /etc/profile #使配置生效[root@localhost maven]# mvn -vApache Maven 3.5.0 (ff8f5e7444045639af65f6095c62210b5713f426; 2017-04-04T03:39:06+08:00)Maven home: /data/maven/apache-maven-3.5.0Java version: 1.8.0_131, vendor: Oracle CorporationJava home: /data/jdk/jdk1.8.0_131/jreDefault locale: zh_CN, platform encoding: UTF-8OS name: &quot;linux&quot;, version: &quot;3.10.0-514.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot; 修改仓库存位置maven 的仓库默认路径是${user.home}/.m2/repository。我们可以修改到指定路径下1[root@localhost maven]# vim apache-maven-3.5.0/conf/settings.xml 修改到指定路径下：1&lt;localRepository&gt;/data/maven/apache-maven-3.5.0/repo&lt;/localRepository&gt;]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[eclipse中变量高亮]]></title>
    <url>%2F2017%2F06%2F16%2Feclipse%E4%B8%AD%E5%8F%98%E9%87%8F%E9%AB%98%E4%BA%AE%2F</url>
    <content type="text"><![CDATA[快捷键1alt+shift+o 设置流程1windows-&gt; preferences-&gt;Java-&gt;Editor-&gt;Mark Occurences 选择最上的复选框。 其中的Local variables就是变量的高亮显示。]]></content>
      <categories>
        <category>eclipse</category>
      </categories>
      <tags>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手机号码相关正则表达式]]></title>
    <url>%2F2017%2F06%2F16%2F%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E7%9B%B8%E5%85%B3%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140import java.util.regex.Matcher; import java.util.regex.Pattern; public class CheckPhoneUtils &#123; /** 电话格式验证 **/ private static final String PHONE_CALL_PATTERN = "^(\\(\\d&#123;3,4&#125;\\)|\\d&#123;3,4&#125;-)?\\d&#123;7,8&#125;(-\\d&#123;1,4&#125;)?$"; /** * 中国电信号码格式验证 手机段： 133,153,180,181,189,177,1700 **/ private static final String CHINA_TELECOM_PATTERN = "(^1(33|53|77|8[019])\\d&#123;8&#125;$)|(^1700\\d&#123;7&#125;$)"; /** * 中国联通号码格式验证 手机段：130,131,132,155,156,185,186,145,176,1709 **/ private static final String CHINA_UNICOM_PATTERN = "(^1(3[0-2]|4[5]|5[56]|7[6]|8[56])\\d&#123;8&#125;$)|(^1709\\d&#123;7&#125;$)"; /** * 中国移动号码格式验证 * 手机段：134,135,136,137,138,139,150,151,152,157,158,159,182,183,184 * ,187,188,147,178,1705 **/ private static final String CHINA_MOBILE_PATTERN = "(^1(3[4-9]|4[7]|5[0-27-9]|7[8]|8[2-478])\\d&#123;8&#125;$)|(^1705\\d&#123;7&#125;$)"; /** * 验证电话号码的格式 * @param str * 校验电话字符串 * @return 返回true,否则为false */ public static boolean isPhoneCallNum(String str) &#123; return str == null || str.trim().equals("") ? false : match(PHONE_CALL_PATTERN, str); &#125; /** * 验证【电信】手机号码的格式 * @param str * 校验手机字符串 * @return 返回true,否则为false */ public static boolean isChinaTelecomPhoneNum(String str) &#123; return str == null || str.trim().equals("") ? false : match(CHINA_TELECOM_PATTERN, str); &#125; /** * 验证【联通】手机号码的格式 * @param str * 校验手机字符串 * @return 返回true,否则为false */ public static boolean isChinaUnicomPhoneNum(String str) &#123; return str == null || str.trim().equals("") ? false : match(CHINA_UNICOM_PATTERN, str); &#125; /** * 验证【移动】手机号码的格式 * @param str * 校验手机字符串 * @return 返回true,否则为false */ public static boolean isChinaMobilePhoneNum(String str) &#123; return str == null || str.trim().equals("") ? false : match(CHINA_MOBILE_PATTERN, str); &#125; /** * 验证手机和电话号码的格式 * @param str * 校验手机字符串 * @return 返回true,否则为false */ public static boolean isPhoneNum(String str) &#123; // 如果字符串为空，直接返回false if (str == null || str.trim().equals("")) &#123; return false; &#125; else &#123; int comma = str.indexOf(",");// 是否含有逗号 int caesuraSign = str.indexOf("、");// 是否含有顿号 int space = str.trim().indexOf(" ");// 是否含有空格 if (comma == -1 &amp;&amp; caesuraSign == -1 &amp;&amp; space == -1) &#123; // 如果号码不含分隔符,直接验证 str = str.trim(); return (isPhoneCallNum(str) || isChinaTelecomPhoneNum(str) || isChinaUnicomPhoneNum(str) || isChinaMobilePhoneNum(str)) ? true : false; &#125; else &#123; // 号码含分隔符,先把分隔符统一处理为英文状态下的逗号 if (caesuraSign != -1) &#123; str = str.replaceAll("、", ","); &#125; if (space != -1) &#123; str = str.replaceAll(" ", ","); &#125; String[] phoneNumArr = str.split(","); // 遍历验证 for (String temp : phoneNumArr) &#123; temp = temp.trim(); if (isPhoneCallNum(temp) || isChinaTelecomPhoneNum(temp) || isChinaUnicomPhoneNum(temp) || isChinaMobilePhoneNum(temp)) &#123; continue; &#125; else &#123; return false; &#125; &#125; return true; &#125; &#125; &#125; /** * 执行正则表达式 * * @param pat * 表达式 * @param str * 待验证字符串 * @return 返回true,否则为false */ private static boolean match(String pat, String str) &#123; Pattern pattern = Pattern.compile(pat); Matcher match = pattern.matcher(str); return match.find(); &#125; public static void main(String[] args) &#123; System.out.println(isPhoneNum("17750581369")); System.out.println(isPhoneNum("13306061248")); System.out.println(isPhoneNum("17750581369,13306061248")); System.out.println(isPhoneNum("17750581369 13306061248")); System.out.println(isPhoneNum("17750581369、13306061248")); System.out.println(isPhoneNum("0596-3370653")); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos防火墙命令]]></title>
    <url>%2F2017%2F06%2F04%2Fcentos%E9%98%B2%E7%81%AB%E5%A2%99%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[查看防火墙状态1systemctl status firewalld 开启防火墙1systemctl start firewalld 关闭防火墙1systemctl stop firewalld 开启防火墙端口123firewall-cmd --permanent --zone=public --add-port=21/tcp firewall-cmd --permanent --zone=public --add-port=21/udp firewall-cmd --reload#重启iptables]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>命令</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx+vsftpd搭建图片服务器]]></title>
    <url>%2F2017%2F06%2F04%2Fnginx%2Bvsftpd%E6%90%AD%E5%BB%BA%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[为了方便大家看到效果，我统一在/data目录下开始操作。 安装 nginxnginx环境安装安装gcc安装nginx需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装gcc：1[root@localhost data]# yum install gcc-c++ 安装PCREPCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。1[root@localhost data]# yum install -y pcre pcre-devel 注：pcre-devel是使用pcre开发的一个二次开发库。nginx也需要此库。安装zlibzlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。1[root@localhost data]# yum install -y zlib zlib-devel 安装opensslOpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。1[root@localhost data]# yum install -y openssl openssl-devel nginx安装下载1[root@localhost data]# wget http://nginx.org/download/nginx-1.12.0.tar.gz 解压1[root@localhost data]# tar -zxvf nginx-1.12.0.tar.gz 配置 configure12[root@localhost data]# cd nginx-1.12.0/[root@localhost nginx-1.12.0]# ./configure 注意：默认安装在/usr/local/nginx编译安装12[root@localhost nginx-1.12.0]# make[root@localhost nginx-1.12.0]# make install 查看安装目录12[root@localhost nginx-1.12.0]# whereis nginxnginx: /usr/local/nginx ngnix常用命令启动nginx12[root@localhost nginx-1.12.0]# cd /usr/local/nginx/sbin/[root@localhost sbin]# ./nginx 注意：执行./nginx启动nginx，这里可以-c指定加载的nginx配置文件，如下：./nginx -c /usr/local/nginx/conf/nginx.conf如果不指定-c，nginx在启动时默认加载conf/nginx.conf文件，此文件的地址也可以在编译安装nginx时指定./configure的参数（–conf-path= 指向配置文件（nginx.conf）） 停止nginx方式1，快速停止： 1[root@localhost sbin]# ./nginx -s stop 此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。 方式2，完整停止(建议使用)： 1[root@localhost sbin]# ./nginx -s quit 此方式停止步骤是待nginx进程处理任务完毕进行停止。 重启nginx 方式1，先停止再启动（建议使用）:对nginx进行重启相当于先停止nginx再启动nginx，即先执行停止命令再执行启动命令。如下： 12[root@localhost sbin]# ./nginx -s quit[root@localhost sbin]# ./nginx 方式2，重新加载配置文件：当nginx的配置文件nginx.conf修改后，要想让配置生效需要重启nginx，使用-s reload不用先停止nginx再启动nginx即可将配置信息在nginx中生效，如下：1[root@localhost sbin]# ./nginx -s reload 测试浏览器输入服务器地址即可 安装vsftpd组件安装vsftpd组件1[root@localhost sbin]# yum -y install vsftpd 安装完后，有/etc/vsftpd/vsftpd.conf 文件，是vsftp的配置文件。 1234查看vsftpd状态: systemctl status vsftpd.service启动vsftpd: systemctl start vsftpd.service停止vsftpd: systemctl stop vsftpd.service重启vsftpd: systemctl restart vsftpd.service 添加一个ftp用户此用户就是用来登录ftp服务器用的。1[root@localhost sbin]# useradd ftpuser 给ftp用户添加密码1[root@localhost sbin]# passwd ftpuser 输入两次密码后修改密码。 防火墙开启21端口123[root@localhost sbin]# firewall-cmd --permanent --zone=public --add-port=21/tcp[root@localhost sbin]# firewall-cmd --permanent --zone=public --add-port=21/udp[root@localhost sbin]# firewall-cmd --reload#重启iptables 修改selinux外网是可以访问上去了，可是发现没法返回目录（使用ftp的主动模式，被动模式还是无法访问），也上传不了，因为selinux作怪了。执行以下命令查看状态：12345678910111213[root@localhost sbin]# getsebool -a|grep ftpftpd_anon_write --&gt; offftpd_connect_all_unreserved --&gt; offftpd_connect_db --&gt; offftpd_full_access --&gt; offftpd_use_cifs --&gt; offftpd_use_fusefs --&gt; offftpd_use_nfs --&gt; offftpd_use_passive_mode --&gt; offhttpd_can_connect_ftp --&gt; offhttpd_enable_ftp_server --&gt; offtftp_anon_write --&gt; offtftp_home_dir --&gt; off 执行上面命令，返回的结果看到12ftpd_full_access --&gt; offtftp_home_dir --&gt; off 代表没有开启外网的访问。12[root@localhost sbin]# setsebool -P ftpd_full_access on[root@localhost sbin]# setsebool -P tftp_home_dir on 这样应该没问题了（如果，还是不行，看看是不是用了ftp客户端工具用了passive模式访问了，如提示Entering Passive mode，就代表是passive模式，默认是不行的，因为ftp passive模式被iptables挡住了，下面会讲怎么开启，如果懒得开的话，就看看你客户端ftp是否有port模式的选项，或者把passive模式的选项去掉。如果客户端还是不行，看看客户端上的主机的电脑是否开了防火墙，关吧）FileZilla的主动、被动模式修改：菜单：编辑→设置 开启被动模式默认是开启的，但是要指定一个端口范围，打开vsftpd.conf文件，在后面加上 12pasv_min_port=30000pasv_max_port=30999 表示端口范围为30000~30999，这个可以随意改。改完重启一下vsftpd 同时在防火墙中开启30000和30999端口。 12345[root@localhost sbin]# firewall-cmd --permanent --zone=public --add-port=30000/tcp[root@localhost sbin]# firewall-cmd --permanent --zone=public --add-port=30000/udp[root@localhost sbin]# firewall-cmd --permanent --zone=public --add-port=30999/tcp[root@localhost sbin]# firewall-cmd --permanent --zone=public --add-port=30999/udp[root@localhost sbin]# firewall-cmd --reload#重启iptables 修改vsftpd.conf文件vsftpd.conf在路径/etc/vsftpd下1[root@localhost vsftpd]# vi /etc/vsftpd/vsftpd.conf 原文1anonymous_enable=YES 修改为1anonymous_enable=NO 配置图片服务器进入配置文件目录 12[root@localhost vsftpd]# cd /usr/local/nginx/conf/[root@localhost vsftpd]# vi nginx.config 方法一、在配置文件server{}中location /{} 修改配置： 12345 #默认请求location / &#123; root /home/ftpuser/images;#定义服务器的默认网站根目录位置 index index.html index.php index.htm;#定义首页索引文件的名称&#125; 其中：/home/ftpuser/images;为创建FTP服务账户ftpuser的根目录下的images目录 方法二、在http{}内配置新服务 1234567891011121314server &#123; listen 8080; server_name localhost; #charset utf-8; #access_log logs/host.access.log main; #默认请求 location / &#123; root /home/ftpuser/images;#定义服务器的默认网站根目录位置 index index.html index.php index.htm;#定义首页索引文件的名称 &#125; &#125; 注意： 1、nginx.conf配置文件最上面一行被注释掉的。 如果没有修改最上面一行,访问的时候回报 403！ 修改成上面我们创建的ftp用户ftpuser后，重新加载nginx配置文件就可以正常访问了。 1user ftpuser 2、如果ping不通服务器，尝试关闭防火墙或者在防火墙中开启80端口 在防火墙中开启80端口 123[root@localhost sbin]# firewall-cmd --permanent --zone=public --add-port=21/tcp[root@localhost sbin]# firewall-cmd --permanent --zone=public --add-port=21/udp[root@localhost sbin]# firewall-cmd --reload#重启iptables 关闭防火墙 1[root@localhost sbin]# systemctl stop firewalld 验证在/home/ftpuser/下新建文件夹images，下面放一张图片1.jpg测试访问：http://192.168.0.50/1.jpg]]></content>
      <categories>
        <category>vsftpd</category>
      </categories>
      <tags>
        <tag>vsftpd</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis集群搭建]]></title>
    <url>%2F2017%2F06%2F01%2Fredis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[安装集群环境12[root@localhost data]# yum install gcc g++ [root@localhost data]# yum install ruby 下载使用 wget命令下载，我本地路径是/data下载地址为 http://download.redis.io/releases/redis-3.2.9.tar.gz1[root@localhost data]# wget http://download.redis.io/releases/redis-3.2.9.tar.gz 安装redis解压1[root@localhost data]# tar -zxvf redis-3.2.9.tar.gz 安装123[root@localhost data]# mv redis-3.2.9 redis[root@localhost data]# cd redis[root@localhost redis]# make install 集群配置创建redis-cluster12[root@localhost redis]#cd /data[root@localhost data]# mkdir redis-cluster 创建节点目录1234[root@localhost data]# cd redis-cluster[root@localhost redis-cluster]# mkdir 7000[root@localhost redis-cluster]# mkdir 7001[root@localhost redis-cluster]# mkdir 7002 修改配置文件redis.conf从解压的原文件中复制 redis.conf并做修改12[root@localhost redis-cluster]# cp /data/redis/redis.conf /data/redis-cluster/[root@localhost redis-cluster]# vi redis.conf 修改配置文件redis.conf中的下面选项123456port 7000daemonize yescluster-enabled yescluster-config-file nodes.conf cluster-node-timeout 5000appendonly yes 修改完redis.conf配置文件中的这些配置项之后把这个配置文件分别拷贝到7000/7001/7002目录下面123[root@localhost redis-cluster]# cp redis.conf 7000[root@localhost redis-cluster]# cp redis.conf 7001[root@localhost redis-cluster]# cp redis.conf 7002 注意：拷贝完成之后要修改7000/7001/7002目录下面redis.conf文件中的port参数，分别改为对应的文件夹的名称 启动redis实例为了方便，这里使用脚本12[root@localhost redis-cluster]# vim startall.sh[root@localhost redis-cluster]# chmod +x startall.sh startall内容如下：12345678cd 7000 redis-server redis.conf cd .. cd 7001 redis-server redis.conf cd .. cd 7002 redis-server redis.conf 启动1[root@localhost redis-cluster]# ./startall.sh 查看redis实例运行12345[root@localhost redis-cluster]# ps axu|grep redisroot 8654 0.0 0.0 141016 7576 ? Ssl 13:40 0:00 redis-server 0.0.0.0:7000 [cluster]root 8658 0.0 0.0 141016 7576 ? Ssl 13:40 0:00 redis-server 0.0.0.0:7001 [cluster]root 8662 0.0 0.0 141016 7572 ? Ssl 13:40 0:00 redis-server 0.0.0.0:7002 [cluster]root 8709 0.0 0.0 112664 968 pts/0 S+ 13:44 0:00 grep --color=auto redis 创建集群12[root@localhost redis-cluster]# cp -r /data/redis/src/redis-trib.rb .[root@localhost redis-cluster]# ./redis-trib.rb create 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 如果你使用 ./redis-trib.rb create –replicas 1 127.0.0.1:7000 …报如下错误，去掉 –replicas 1 ，或者建多几个节点，至少6个！ 集群测试1[root@localhost redis-cluster]# redis-cli -c -p 7000 使用quit退出集群测试，打开两个终端A和BA终端：连上7000端口，设置test的值123456redis-cli -h 127.0.0.1 -c -p 7000127.0.0.1:7000&gt; set test 123-&gt; Redirected to slot [6918] located at 127.0.0.1:7001OK127.0.0.1:7001&gt; get test "123" B终端：连上7002端口，查看test的值12345[root@localhost bank_gz]# redis-cli -h 127.0.0.1 -c -p 7002127.0.0.1:7002&gt; get test-&gt; Redirected to slot [6918] located at 127.0.0.1:7001"123"127.0.0.1:7001&gt; 成功在7002上查看到7000上设置test的值。]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[码农日常工具推荐]]></title>
    <url>%2F2017%2F05%2F30%2F%E7%A0%81%E5%86%9C%E6%97%A5%E5%B8%B8%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90%2F</url>
    <content type="text"><![CDATA[文档工具-Dash都说文档在手,天下我有。这个工具对于我这种喜欢前后端折腾的人来说是非常有用的,因为很多时候,我往往只记住思路,但是具体代码记不住,这个工具有很好的保存代码块功能.比如请求与响应,总有你想知道的这篇中的各种请求,我们就可以用代码块来保存,另外还可以通过占位符,在点击Use时替换掉占位符的内容 其次,这个工具还有另一个很有用的功能.比如我们有这么个场景,我们查JavaSE文档的时候是不是经常遇到这么个问题,就是我们想查某个方法,但是却要知道它在哪个类才能查,而不能根据这个方法直接去查.但是现实中,我们之所以要查往往是不记得类名,所以这个体验就不是很好,而这个工具很好的解决了这个问题.如图 如果有用过其他文档工具的同学就会发现,其他的工具是不会有这个直接根据方法就能搜索的功能的,都是必须要找到关键类才能搜索.而且还提供了Google和stackoverflow,非常贴心.该工具提供了海量文档,不过都是英文的,当然比较常用的比如JavaSE、Jquery、PHP这些是有中文的,搜一下就出来,搞不定再留言。 思维导图工具-MindNode这是一款比较美观的思维导图软件,我们平时用得比较多的还有XMind,XMind在Windows,Mac都有,但是就是颜值不高,MindNode有多种主题切换,比较好看,像我之前写的图解Java面试题系列的都是用的MindNode,具体效果可以翻看我简书之前的文章。 ###绘图工具-OmniGraffle直接先上图,比如我之前画的发送验证码的业务思维图,如果能把这个图画出来,那些把代码写出了应该是比较轻松的事。 下面就来说下,怎么画这个图。 打开软件打开软件 随意选择一个都是OK的,比如选择第一个 绘图选中方块 黑色背景设置配色这个你可以根据自己的喜好来,比如我这里用的是RGB(62,61,63) 设置好颜色之后,你可以把他添加到喜爱的 组合图形 从图中就可以看出,其实这些方块都是一些组合图形.配色这些可以自己任意调,当然,OmniGraffle本身也提供了很多好看的配色方案,可以自己尝试。 注意事项OmniGraffle中提供了大量的绘图原型,可以自己摸索,组合,配色出好看的方案.然后就是各种拖拽.但是要注意的是,黑色的背景要放在图层的最下面,图层区域就是图中Layer区域,这个你用着用着自然明白,遇到坑再留言。其他工具 其他工具不定期更新,想到什么更新什么,这里先简单一笔带过,比较感兴趣评论留言我再详细更新。 &gt;&gt;Postman Chrome插件，调试restful api的神器,比较喜欢的是他的书签功能。 &gt;&gt;jsonView Chrome插件，请求json时,能将返回的json数据格式化,非常方便,强烈推荐。 &gt;&gt;iTerm2 Mac的终端工具，网上有很多好看的配色,追求颜值的不妨一试。 &gt;&gt;欧路词典 ，比较好用的翻译软件。 &gt;&gt;MacDown 我个人比较喜欢的Mac上的Markdown编写工具,支持多种Markdown样式风格。 &gt;&gt;Shadowsocks 科学上网工具，码农必备。 &gt;&gt;Snap Mac上的手势切换工具，和Alfred的工作流差不多,不过比他轻量。 &gt;&gt;TeamViewer 远程控制电脑工具，可以远程帮妹子修电脑,当然我都是只修电脑不过夜的。 &gt;&gt;licecap Mac上gif录图的工具。 &gt;&gt;PaintCode 动画生成Object-C代码的工具,让你不再害怕酷炫动画。 &gt;&gt;HHEnumeration 最喜欢的一个Xcode插件,非常友好的枚举提示,可以github搜索一下,iOS开发强烈推荐。 &gt;&gt;Simpholders iOS开发的应该都用过,快速到达沙盒。]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git status中文显示乱码]]></title>
    <url>%2F2017%2F05%2F29%2Fgit%20status%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81%2F</url>
    <content type="text"><![CDATA[git status显示类似如下乱码1Jenkins\345\256\211\350\243\205(war\345\214\205\345\275\242\345\274\217).md 解决方法1git config core.quotepath false]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github+hexo多终端同步]]></title>
    <url>%2F2017%2F05%2F28%2Fgithub%2Bhexo%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[思路操作思路很简单，就是把站点的东西全部存放在github项目中的hexo分支中，A、B电脑只要维护项目的hexo分支就行。 初始化hexo分支(A电脑)1234567git init //初始化本地仓库git add . //添加所有的文件(hexo所有的文件)git commit -m &quot;blog source hexo&quot;git branch hexo //新建hexo分支git checkout hexo //切换到hexo分支上git remote add origin git@github.com:yourname/yourname.github.io.git //将本地与Github项目对接git push origin hexo //push到Github项目的hexo分支上 使用hexo分支(B电脑)12345678git clone -b hexo git@github.com:yourname/yourname.github.io.git //将Github中hexo分支clone到本地cd yourname.github.io //切换到刚刚clone的文件夹内npm install //安装必要的所需组件，不用再inithexo new post &quot;test&quot; //新建一个.md文件，并编辑完成自己的博客内容git add source //添加文字git commit -m &quot;测试&quot;git push origin hexo //更新分支hexo d -g //同步博客到Github中的master 维护hexo分支(A、B电脑)123456git pull origin hexo //先pull完成本地与远端的融合hexo new post &quot; new blog name&quot;git add sourcegit commit -m &quot;XX&quot;git push origin hexohexo d -g]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[管理多个github账号]]></title>
    <url>%2F2017%2F05%2F27%2F%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[场景描述之前在电脑上添加A账号的ssh，后来使用B账号的github，在提交代码的时候遇到这样的情况，比如fatal: remote error: Permission denied 解决方案参考这篇文章https://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts–net-22574]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac电脑生成SSH key和Github通信]]></title>
    <url>%2F2017%2F05%2F27%2FMac%E7%94%B5%E8%84%91%E7%94%9F%E6%88%90SSH%20key%E5%92%8CGithub%E9%80%9A%E4%BF%A1%2F</url>
    <content type="text"><![CDATA[检查ssh1234Hunter-Mac:Highter.github.io yangjianwei$ ls -al ~/.sshtotal 16drwx------ 3 yangjianwei staff 102 Dec 13 15:20 .drwxr-xr-x+ 60 yangjianwei staff 2040 May 14 14:58 .. 注意：如果已经存在ssh key，则可以看到 id_rsa 和 id_rsa.pub ，可跳过第二步。 生成ssh1ssh-keygen -t rsa -b 4096 -C "your_email@example.com" 邮箱填写自己的邮箱，中间一直按回车即可。 查看本地ssh查看ssh的key值 1Hunter-Mac:.ssh yangjianwei$ cat ~/.ssh/id_rsa.pub github配置ssh在github上找到ssh配置页面，Profile-&gt;SSH and GPG keys-&gt;New SSH key，填写ssh的title和key值]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下使用Hexo搭建github博客]]></title>
    <url>%2F2017%2F05%2F26%2FMac%E4%B8%8B%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Mac下使用Hexo搭建github博客注意：本文实践是在mac系统下进行，hexo安装参考Mac下安装Hexo一文。 复制github仓库地址在自己的github账号下复制 *.github.io仓库的地址，如果没有，需要新建一个 关联github终端里cd到存放博客的文件夹下，这里我的文件夹名字为 Highter.github.io，编辑_config.yml，滑到最底部，将deploy里的内容改为如下：1234deploy: type: git repository: https://github.com/Highter/Highter.github.io.git // 这个地方填写自己的仓库地址 branch: master 部署到github发布到github1Hunter-Mac:Highter.github.io yangjianwei$ hexo deploy 根据提示输入用户名和密码，回车即可 注意： 运行 hexo deploy部署到github ，若提示“ERROR Deployer not found: git”，如下 则安装hexo-deployer-git,如图表示安装成功 1Hunter-Mac:Highter.github.io yangjianwei$ npm install hexo-deployer-git --save 查看效果在浏览器输入https://yangjianwei.github.io/ 查看效果(细心的朋友可能发现了访问链接和步骤2配置的仓库地址不一样。个人有几个github账号，为了方便大家看到效果，我把测试的东西推送到yangjianwei这个账号上了)]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下hexo使用next主题]]></title>
    <url>%2F2017%2F05%2F26%2FMac%E4%B8%8Bhexo%E5%AE%89%E8%A3%85next%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Mac下hexo使用next主题下载主题在终端窗口下，切到 Hexo 站点目录下，下载NexT主题。这里我使用的站点目录是 Highter.github.io 1Hunter-Mac:Highter.github.io yangjianwei$ git clone https://github.com/iissnan/hexo-theme-next themes/next 开启主题在站点目录下修改 _config.yml 文件 1theme: next 验证主题验证主题需要启动服务来看效果，在启动服务前先执行 hexo clean 来清理hexo缓存 清理缓存1Hunter-Mac:Highter.github.io yangjianwei$ hexo clean 启动服务1Hunter-Mac:Highter.github.io yangjianwei$ hexo server 查看效果在浏览器输入http://localhost:4000/查看效果 设置主题设置主题方案Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白Mist - Muse 的紧凑版本，整洁有序的单栏外观Pisces - 双栏 Scheme，小家碧玉似的清新Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可这里选择 Pisces作为例子我的 主题配置文件 路径在：1../Highter.github.io/themes/next/_config.yml 修改如下：1234# Schemes#scheme: Muse#scheme: Mistscheme: Pisces 设置语言编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，我的 站点配置文件 路径在：1../Highter.github.io/_config.yml 配置如下： 1language: zh-Hans 目前 NexT 支持的语言如以下表格所示： 语言 代码 设定示例 English en language: en 简体中文 zh-Hans language: zh-Hans Français fr-FR language: fr-FR Português pt language: pt or language: pt-BR 繁體中文 zh-hk 或者 zh-tw language: zh-hk Русский язык ru language: ru Deutsch de language: de 日本語 ja language: ja Indonesian id language: id Korean ko language: ko 设置菜单默认运行只有 Home 、Archives 、Tags修改主题 主题配置文件12345678menu: home: / #首页 categories: /categories #分类 about: /about #关于 archives: /archives #归档 tags: /tags #标签 sitemap: /sitemap.xml commonweal: /404.html 设置侧栏left - 靠左放置right - 靠右放置修改主题 主题配置文件12sidebar: position: left 头像编辑主题 主题配置文件 修改字段 avatar， 值设置成头像的链接地址。其中，头像的链接地址可以是： 地址 值 完整的互联网 URI http://example.com/avatar.png 站点内的地址 将头像放置主题目录下的 source/uploads/ （新建 uploads 目录若不存在） 配置为：avatar: /uploads/avatar.png或者 放置在 source/images/ 目录下 配置为：avatar: /images/avatar.png 头像设置示例avatar: /uploads/avatar.jpg 设置站点1234567# Sitetitle: Highter's blog #标题subtitle: Smile at life ^_^ #小标题description: Life is short,I use Java #描述author: Highter #作者language: zh-Hans #语言timezone: 添加文章把自己所写的文章添加到站点的_posts文件下 123Hunter-Mac:Highter.github.io yangjianwei$ hexo cleanINFO Deleted database.Hunter-Mac:Highter.github.io yangjianwei$ hexo s 到这一步我们可以查看一下效果 分类页当我们点击分类的时候可以看到如图 需要初始化分类 hexo new page categories12Hunter-Mac:Highter.github.io yangjianwei$ hexo new page categoriesINFO Created: ~/Documents/msg/github/Highter.github.io/source/categories/index.md 修改~/Documents/msg/github/Highter.github.io/source/categories/index.md 文件123456---title: 分类date: 2017-05-18 22:38:17type: "categories"comments: false--- 标签页需要初始化标签 hexo new page tags12Hunter-Mac:Highter.github.io yangjianwei$ hexo new page tagsINFO Created: ~/Documents/msg/github/Highter.github.io/source/tags/index.md 修改~/Documents/msg/github/Highter.github.io/source/tags/index.md 文件123456---title: 标签date: 2017-05-18 22:57:40type: "tags"comments: false--- 设置文章分类和标签添加类似下面的分类和标签，注意categories和tags的冒号后需要空格12345---title: CentOS安装JDKcategories: [java]tags: [java,centos,jdk]--- 设置阅读更多修改 主题配置文件1234# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: true #设置为true length: 150 效果 设置描述123456---title: CentOS安装JDKcategories: [java]tags: [java,centos,jdk]description: 本文介绍在linux系统下安装JDK，这里选择在CentOS系统下实践。#摘要描述--- 结束语上面只是一些关于主题的基础配置，更多详情配置参考Next主题使用文档]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下安装Hexo]]></title>
    <url>%2F2017%2F05%2F26%2FMac%E4%B8%8B%E5%AE%89%E8%A3%85Hexo%2F</url>
    <content type="text"><![CDATA[安装流程指导安装流程：homebrew—-&gt;nodejs—-&gt;hexo 注意：hexo是基于nodejs的，而安装nodejs这里使用homebrew方式 安装homebrew1ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 安装nodejs 1brew install node 安装hexo1sudo npm install -g hexo 初始化初始化文件夹创建存放博客的文件夹，这里我创建的文件夹名字为 Highter.github.io(为了之后和github配合使用)12Hunter-Mac:github yangjianwei$ mkdir Highter.github.ioHunter-Mac:github yangjianwei$ hexo init Highter.github.io/ 安装npm切换到所建立文件夹路径下，安装npm12Hunter-Mac:github yangjianwei$ cd Highter.github.io/Hunter-Mac:Highter.github.io yangjianwei$ npm install 启动hexo服务器1Hunter-Mac:Highter.github.io yangjianwei$ hexo server 如图表示启动成功 查看效果在浏览器输入http://localhost:4000 查看效果]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VirtualBox安装centos7]]></title>
    <url>%2F2017%2F05%2F21%2Fvirtualbox%E5%AE%89%E8%A3%85centos%2F</url>
    <content type="text"><![CDATA[下载下载地址： https://www.centos.org/download/我这里选择的是DVD ISO版本。 创建虚拟系统新建 虚拟电脑名称和系统类型填写名称，这里填写 CentOS7,类型选择 Linux，版本选择 Other Linux(64-bit) 内存大小设置内存大小，我电脑内存是8G的，所以这里我赋予它2G，大家可以根据自己电脑配置情况设置 虚拟硬盘选择 现在创建虚拟硬盘 虚拟硬盘文件类型文件类型选择VDI(VirtualBox 磁盘映像) 动态分配建议选择动态分配，不会占用太多物理空间，根据情况动态分配 文件位置和大小选择保存位置和设置极限大小 设置虚拟系统 系统选择让 光驱 启动优先 存储选择 光驱 位置 网络设置网络，连接方式选择 网络地址转换(NAT) 安装安装首页选择 Install CentOS Linux 7,回车 选择语言 安装主界面进入安装主界面之后要设置 软件选择 和 安装位置 软件选择选择所需要的附加选项，点击 完成 安装位置选择 本地标准磁盘，点击 完成 开始安装设置完 软件选择 和 安装位置 之后点击 开始安装 用户设置设置 ROOT密码 和 创建用户 ROOT密码 创建用户 等待安装设置完 ROOT密码 和 创建用户 之后等待安装 安装完成安装完成之后点击 重启 即可 启动启动前配置启动的时候提示需要同意协议书和设置网络，如果你在步骤 4.3 上已经设置了，这里就不需要再设置 同意协议书勾选 同意 复选框，点击 完成 即可 设置网络点击右边开关，显示 开启 之后点击完成即可 输入用户密码输入步骤 4.4.2 设置的密码 系统主界面登录之后可以看到系统的主界面，如图]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tomcat报错： Tomcat version 7.0 only supports J2EE 1.2, 1.3, 1.4, and Java EE 5 and 6 Web modules]]></title>
    <url>%2F2017%2F05%2F04%2FTomcat%E6%8A%A5%E9%94%99%EF%BC%9A%20Tomcat%20version%207.0%20only%20supports%20J2EE%201.2%2C%201.3%2C%201.4%2C%20and%20Java%20EE%205%20and%206%20Web%20modules%2F</url>
    <content type="text"><![CDATA[问题描述web项目加载到tomcat时报错： Tomcat version 7.0 only supports J2EE 1.2, 1.3, 1.4, and Java EE 5 and 6 Web modules如图： 处理方法修改 org.eclipse.wst.common.project.facet.core.xml文件。在eclipse的workspace里面找到该项目，在项目下找到org.eclipse.wst.common.project.facet.core.xml文件。路径：.settings-&gt;org.eclipse.wst.common.project.facet.core.xml打开文件，如下123456789&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;faceted-project&gt; &lt;fixed facet="wst.jsdt.web"/&gt; &lt;installed facet="java" version="1.7"/&gt; &lt;installed facet="jst.web" version="3.1"/&gt; &lt;installed facet="jst.jsf" version="2.2"/&gt; &lt;installed facet="jst.jaxrs" version="2.0"/&gt; &lt;installed facet="wst.jsdt.web" version="1.0"/&gt;&lt;/faceted-project&gt; 修改 ，把version修改成3.0，修改完如下123456789&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;faceted-project&gt; &lt;fixed facet="wst.jsdt.web"/&gt; &lt;installed facet="java" version="1.7"/&gt; &lt;installed facet="jst.web" version="3.0"/&gt; &lt;installed facet="jst.jsf" version="2.2"/&gt; &lt;installed facet="jst.jaxrs" version="2.0"/&gt; &lt;installed facet="wst.jsdt.web" version="1.0"/&gt;&lt;/faceted-project&gt; 处理成果]]></content>
      <categories>
        <category>tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql批量插入-存在id相同则更新数据]]></title>
    <url>%2F2017%2F05%2F04%2Fsql%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%3A%E5%AD%98%E5%9C%A8id%E7%9B%B8%E5%90%8C%E5%88%99%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[建表语句12345678910SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for user-- ----------------------------DROP TABLE IF EXISTS `user`;CREATE TABLE `user` ( `a` int(11) NOT NULL, `b` varchar(20) DEFAULT NULL, PRIMARY KEY (`a`)) ENGINE=InnoDB DEFAULT CHARSET=utf8; 插入测试数据1INSERT INTO USER VALUES (1,'a'),(2,'b'),(3,'c'); 查看结果：1SELECT * from USER ; 插入存在id的测试数据1INSERT INTO USER VALUES (1,'a'),(2,'b'),(3,'c'),(4,'d') ON DUPLICATE KEY UPDATE b='test'; 查看结果：1SELECT * from USER ; 到此，我们已经可以成功看到测试结果，我们已经做到了 在sql批量插入时候，存在id相同则更新数据。]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Eclipse中导入GitHub项目]]></title>
    <url>%2F2017%2F05%2F04%2FEclipse%E4%B8%AD%E5%AF%BC%E5%85%A5GitHub%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[注意：安装前请确认一下电脑是否安装了Git，Git的安装可以参考Git安装一文。 选择工程Eclipse中选择File-》import-》Git-》Projects from Git，点击 Next 选择仓库源选择Clone URI，点击 Next 配置仓库源信息URI填写git的仓库URL，并在Authentication中填写GitHub的用户名和密码，打钩 Store in Secure Store记住密码，方便下次进来不需要再输入用户名和密码，这里的测试仓库源地址为 ：https://github.com/Highter/SpringBoot-SourceCode.git，配置完之后点击 Next 选择分支由于项目只有一个master分支，就选择master即可，点击Next 选择本地仓库位置在Directory点击Browse选择创建的本地仓库位置 等到项目下载 导出项目类型选择导出项目名称，这里选择Import as general project，导出成为一个普通工程，最后点击Next 配置项目名称配置完项目名称点击 Finish 即可]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>eclipse</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[上传本地代码到github]]></title>
    <url>%2F2017%2F05%2F03%2F%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E5%88%B0github%2F</url>
    <content type="text"><![CDATA[安装GitGit安装可以参考Git安装一文 创建GitHub仓库创建仓库在GitHub上点击 New repository，在创建仓库页面上想写完信息之后，点击 Create repository 即可 复制仓库地址点击Clone or download 之后，在弹出的小界面上可以直接复制该仓库的地址 初始化本地仓库克隆远程仓库到本地1git clone https://github.com/Highter/SpringBoot-SourceCode.git clone后面的地址就是步骤2.2复制的项目地址可以看到远程的仓库已经克隆到本地了 添加文件到本地待提交区把文件复制到SpringBoot-SourceCode文件下，cd到SpringBoot-SourceCode文件夹下，执行如下命令1git add . 如果只是想添加某个特定的文件，只需把.换成特定的文件名即可，如git add text.txt 提交到仓库1git commit -m &quot;注释语句&quot; 提交本地仓库到GitHub1git push 如果是首次推送代码，会弹出如图对话框，输入github的账号和密码点击 Login 即可 查看结果刷新github上仓库的页面，查看结果]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSP页面报错：The superclass javax.servlet.http.HttpServlet was not found on the Java Build Path]]></title>
    <url>%2F2017%2F05%2F02%2FJSP%E9%A1%B5%E9%9D%A2%E6%8A%A5%E9%94%99%EF%BC%9AThe%20superclass%20javax.servlet.http.HttpServlet%20was%20not%20found%20on%20the%20Java%20Build%20Path%2F</url>
    <content type="text"><![CDATA[问题描述新建的web项目，index.jsp页面报错：The superclass “javax.servlet.http.HttpServlet” was not found on the Java Build Path如图： 处理方法单击鼠标右键》Build Path》Configure Build Path,在Libraries下点击 Add Variable选择 Server Runtime 之后点击 Next选择Tomcat之后点击Finish最后点击 OK 即可 处理成果]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS安装JDK]]></title>
    <url>%2F2017%2F05%2F01%2FCentOS%E5%AE%89%E8%A3%85JDK%2F</url>
    <content type="text"><![CDATA[创建目录在/usr/local下创建java/jdk目录1234[higher@localhost ~]$ pwd/home/higher[higher@localhost ~]$ mkdir /usr/local/javamkdir: cannot create directory ‘/usr/local/java’: Permission denied 用户权限不足，切换到root用户 123456[higher@localhost ~]$ su rootPassword: [root@localhost higher]# mkdir /usr/local/java[root@localhost higher]# cd /usr/local/java/[root@localhost java]# mkdir jdk[root@localhost java]# cd jdk/ 下载JDK压缩包1[root@localhost jdk]# wget -c http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz 如图表示下载成功 解压1[root@localhost jdk]# tar -zxvf jdk-8u131-linux-x64.tar.gz 设置环境变量进入jdk目录，查看当前位置123[root@localhost jdk]# cd jdk1.8.0_131/[root@localhost jdk1.8.0_131]# pwd/usr/local/java/jdk/jdk1.8.0_131 编辑profile文件1[root@localhost jdk1.8.0_131]# vim /etc/profile 在profile文件末尾添加如下内容：12345JAVA_HOME=/usr/local/java/jdk/jdk1.8.0_131JRE_HOME=/usr/local/java/jdk/jdk1.8.0_131/jreCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME CLASS_PATH PATH 让修改生效:1[root@localhost jdk1.8.0_131]# source /etc/profile 验证1[root@localhost jdk1.8.0_131]# java -version 注意:如果查看到得JDK版本为OpenJDK不要惊慌，这是因为在安装CentOS的时候，自带了一个OpenJDK。如图 这个JDK并不是我们想要的，我们需要在/usr/bin目录重新设置java javac 链接。 12345[root@localhost jdk1.8.0_131]# cd /usr/bin/[root@localhost bin]# rm -rf java[root@localhost bin]# rm -rf javac[root@localhost bin]# ln -s /usr/local/java/jdk/jdk1.8.0_131/bin/java java[root@localhost bin]# ln -s /usr/local/java/jdk/jdk1.8.0_131/bin/javac javac 设置之后重新运行命令 java -version ,如图表示成功]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>centos</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tomcat配置详解]]></title>
    <url>%2F2017%2F04%2F27%2Ftomcat%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[配置用户名和密码找到tomcat的目录，修改conf路径下的tomcat-users.xml文件，如我本地地址为 D:\Java\TOMCAT\apache-tomcat-7-8080\conf\tomcat-users.xml在中添加如下内容，用户名和密码都为admin，保存即可。12345&lt;tomcat-users&gt; &lt;role rolename="manager-script"/&gt; &lt;role rolename="manager-gui"/&gt; &lt;user username="admin" password="admin" roles="manager-script,manager-gui"/&gt;&lt;/tomcat-users&gt; 配置端口修改conf路径下的server.xml文件，如我本地地址为 D:\Java\TOMCAT\apache-tomcat-7-8081\conf\server.xml a、修改http访问端口（默认为8080端口），将8080修改为tomcat不在使用的端口号，例如8081123&lt;Connector port="8081" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" /&gt; b、修改Shutdown端口（默认为8005端口），将8005修改为没有在使用的端口号，例如80151&lt;Server port="8015" shutdown="SHUTDOWN"&gt; c、修改8009端口，将8009修改为没有在使用的端口号，例如80191&lt;Connector port="8019" protocol="AJP/1.3" redirectPort="8443" /&gt;]]></content>
      <categories>
        <category>tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jenkins+git+maven搭建自动化部署环境]]></title>
    <url>%2F2017%2F04%2F26%2Fjenkins%2Bgit%2Bmaven%E6%90%AD%E5%BB%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[安装GitGit安装可以参考Git安装一文 安装MavenMaven的安装可以参考Maven安装一文 安装Jenkinsjenkins的安装可以参考3.1 Jenkins安装3.2 Jenkins安装(war包形式)注：为了方便，本次实验采用war包形式安装 jenkins配置插件管理经过步骤3的初始化插件安装，这时候jenkins已经具备了大部分了插件，个别插件才需要另外安装。已经点击 管理插件，进入插件管理界面。要安装两个插件：Maven Integration plugin 用来构建maven的项目,一个是对容器依赖的插件；Deploy to container Plugin 自动发布到相关容器上去 安装Maven Integration plugin如果已经安装，可直接跳过该步骤 。在系统管理／可选插件 里面，我们直接用全局搜索 Maven Integration plugin,打钩，点直接安装就行 安装Deploy to container Plugin如果已经安装，可直接跳过该步骤 。在系统管理／可选插件 里面，我们直接用全局搜索 Deploy to container Plugin,打钩，点直接安装就行 如果在使用过程中发现少了其它插件，安装步骤同4.1.1和4.1.2相似 设置全局工具进入全局工具配置页面，Global Tool Configuration Maven配置文件 JDK配置注：不要勾选自动安装，否则不能填写JAVA_HOME等信息，下面的maven、git等配置同样 Git配置说明：git选择的Path是git安装目录的cmd下的git.exe，在构建时执行git命令会调用这个程序 Maven配置 项目配置新建任务创建一个新的任务-&gt;构建一个maven项目，输入项目名，这里以JenkinsDemo为例子，点击OK 配置项目名和描述 源码管理配置源码管理这里我以Git为例子，Repository URL填写项目的地址，可以使https地址，也可以是SHH地址。注意，如果使用https地址，步骤需要点击Add-&gt;填写网站的用户名和密码，要使用SHH地址，在这之前我们必须在本机上生成了ssh密钥，并且在平台上设定过公钥才可以使用。这里我使用的是码云平台上的项目，参考文章 本地电脑和 Git @ OSC 之间SHH连接教程这是我用来测试项目的SHH地址：git@git.oschina.net:higher/webtest.git如有需要的朋友可以自行下载，https地址为: https://git.oschina.net/higher/webtest.gita.SHH方式 如果出现如下的错误，请检查公钥配置b.https方式 Build构建配置Build构建配置的Root POM填写:pom.xml；Gloals and options填写:clean package 构建后操作配置构建后操作选择Deploy war/ear to a container(如果没有这个，请检查是否安装了插件Deploy to container Plugin)，点击Add Container选择构建之后发布war包的位置，我本地用的tomcat7,所以选择它，填写内容对应如下,填写完点击 保存 即可。WAR/EAR files:target\webTest.war Tomcat 下 Manager user name:adminManager password:admin Tomcat URL:http://localhost:8080注意： jenkins构建成功之后会在 “.jenkins\workspace\任务名称\target” 路径下 产生war包，比如我本地位置为C:\Users\bank_gz\.jenkins\workspace\JenkinsDemo\target\webTest.war，如图填写的发布的Tomcat URL必须配置用户名和密码，配置的用户名和密码对应上面填写的Manager user name和Manager password,tomcat相关的配置参考tomcat配置详解，不然在构建的时候会报403的错误，如图 通过上面的步骤， 当构建时候会从git服务器拉去代码，再通过maven的clean package命令编译打包，成功时候就会在C:\Users\bank_gz\.jenkins\workspace\JenkinsDemo\target路径下产生webTest.war，同时发布到http://localhost:8080服务器下，当然Tomcat URL也可以填写其它url，比如http://localhost:8081。只要确定服务启动起来而且配置了用户名和密码就ok，这时候war包就会被加载到tomcat的webapps路径下被自动解压发布。 项目构建立即构建在新建的任务JenkinsDemo下,点击 立即构建，在构建历史上可以看到构建的历史，点击进去构建历史 查看构建日志在构建历史上点击 Console Output查看构建日志在构建历史上看到日志输出最后是Finished:SUCCESS即表示构建步骤成功 查看项目构建情况回到首页可也可以看到构建情况，如下图表示成功 测试成果在浏览器上输入http://127.0.0.1:8080/webTest/可以查到刚刚用来测试构建项目的首页]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>自动化部署</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins安装(war包形式)]]></title>
    <url>%2F2017%2F04%2F26%2FJenkins%E5%AE%89%E8%A3%85(war%E5%8C%85%E5%BD%A2%E5%BC%8F)%2F</url>
    <content type="text"><![CDATA[下载下载地址： https://jenkins.io/download/选择war包下载，这里我选择的是稳定版本。 安装直接放到tomcat的webapps目录下，启动tomcat就可以了,双击startup.bat启动 配置Jenkins server配置页面在浏览器上输入 http://127.0.0.1:8080/jenkins/ 打开jenkins服务器 输入默认密码根据提示，找到密码输入，点击Continue 配置Jenkins server安装插件，这里选择推荐的插件进行安装，点击Install suggested plugins即可。当然用户也可以自定义选择插件进行安装，如果这一步选择插件有遗漏的话，后续也可以进行补充安装 等待配置等待安装，等待10分钟左右（电脑配置不同安装时间也不同） 设置用户和密码安装完之后，跳到配置用户和密码的界面，输入相关信息，设置用户和密码，点击 Sava and Finish 即可。如果这一步被跳过，默认用户名就是admin，默认密码就是3.2步骤的密码 配置成功到此，Jenkins server已经配置成功了。点击 Start using Jenkins 开启Jenkins之旅吧！ 访问Jenkins服务器登陆接下来在日常使用中，如果想打开Jenkins服务器，在浏览器输入 http://127.0.0.1:8080/jenkins ，填写配置的用户名和密码，点击登陆即可 Jenkins主界面登陆成功之后，就可以进入到Jenkins主界面了。欢迎来到新大陆！ Jenkins服务器开启和关闭在jenkins.war所在的tomcat路径下，找到bin目录比如我本地的路径： D:\Java\TOMCAT\apache-tomcat-7-8080\bin停止：shutdown.bat开始：startup.bat]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oschina码云如何导入项目]]></title>
    <url>%2F2017%2F04%2F21%2Foschina%E7%A0%81%E4%BA%91%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[简易的命令行入门教程:Git 全局设置:12git config --global user.name &quot;用户名&quot;git config --global user.email &quot;邮箱&quot; 创建 git 仓库:12345678mkdir webtestcd webtestgit inittouch README.mdgit add README.mdgit commit -m &quot;注释&quot;git remote add origin https://git.oschina.net/higher/webtest.gitgit push -u origin master 已有项目?123cd existing_git_repogit remote add origin https://git.oschina.net/higher/webtest.gitgit push -u origin master]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>码云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第三方Maven仓库地址使用]]></title>
    <url>%2F2017%2F04%2F21%2F%E7%AC%AC%E4%B8%89%E6%96%B9Maven%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[第三方Maven仓库地址使用 国内maven仓库下载东西好慢，好多企业都会自建maven仓库，对于我们这些个人开发者就悲催了，还能好好玩耍吗？还好国内还是有比较好用的maven仓库，比如：阿里云的。地址：http://maven.aliyun.com/nexus/在maven的settings.xml，文件位置在maven的安装路径下，比如我本地的路径D:\Java\MAVEN\apache-maven-3.5.0\conf文件里配置mirrors的子节点，添加如下mirror123456&lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Eclipse中配置Maven]]></title>
    <url>%2F2017%2F04%2F20%2FEclipse%E4%B8%AD%E9%85%8D%E7%BD%AEMaven%2F</url>
    <content type="text"><![CDATA[注意：安装前请确认一下电脑是否安装了Maven，Maven的安装可以参考Maven安装一文。 说明安装前需先确认使用的Eclipse是否已经集成了Maven插件，如果已经集成，可以跳过步骤2。查看：Windowns-preference里面有没有maven选项，如图表示已经集成，可以跳过步骤2。 安装Maven插件填写Maven地址选择help菜单下面的install new software菜单项，点击Add。Name填写maven，Location填写maven在线安装地址，地址 http://download.eclipse.org/technology/m2e/releases。填写完点击OK 选择插件之后可以根据提示来进行安装。安装完成后需要重新启动Eclipse。安装完成重启之后我们可以看到菜单window-&gt;Preferences点击进入后会多出一栏Maven的菜单栏。 Maven插件配置添加Maven安装目录Windowns-preference-maven-installations，在出现的右边窗口中选择add按钮添加我们自己的Maven安装目录。点击Finish即可 选择目录勾选刚刚添加进来的maven目录 设置setting.xm文件点击User settings，Global Settings是全局的setting，所有用户可以访问，User Settings只有本用户才可以访问的。这里我选择Global Settings，添加setting.xml(位置在本机安装目录下面的conf文件下，当然用户也可以把setting.xml文件放在其它位置)，添加setting.xml文件之后eclipse会读setting.xml配置文件里面的仓库的存储位置，自动显示到Local Repository上，然后点击 OK，这样就完成了 eclipse上 maven 插件配置，就可以在eclipse中使用maven了。]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>eclipse</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git命令之用户名和邮箱地址]]></title>
    <url>%2F2017%2F04%2F20%2FGit%E5%91%BD%E4%BB%A4%E4%B9%8B%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1%E5%9C%B0%E5%9D%80%2F</url>
    <content type="text"><![CDATA[注意：本地使用Git的话需确保已经安装了Git，安装教程参考Git安装一文。 说明用户名和邮箱地址是本地Git客户端的一个变量，不随git库而改变。每次commit都会用用户名和邮箱纪录。 修改git config –global user.name “username” 修改/配置用户名git config –global user.email “email” 修改/配置邮箱global是非必须的，当带上global说明配置的信息为全局 查看git config user.name 查看用户名git config user.email 查看邮箱]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据库安装]]></title>
    <url>%2F2017%2F04%2F19%2FMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[下载选择版本win版本下载地址： https://dev.mysql.com/downloads/mysql/下载官方推荐的版本，点击Download 跳转下载页跳转到下载页面，选择如图下载版本，点击Download 开始下载点击 No thanks, just start my download. 开始下载 安装双击安装包 同意协议书同意协议书，打钩之后点击Next 选择安装类型安装类型有：Developer Default 默认安装类型；Server only 仅作为服务器；Client only 仅作为客户端；Full 完全安装类型；Custom 用户自定义安装类型。我们这里以自定义Custom安装为例，选择Custom之后点击Next 选择组件选择好需要安装的组件，点击Next 检查配置 开始安装点击Execute开始安装 安装完成安装完成之后点击Next 准备配置进入准备配置页面，点击Next 开始配置这里有三个选择：1.Developer Machine(开发机器)，个人用桌面工作站，占用最少的系统资源；2.Server Machine（服务器），MySQL服务器可以同其它应用程序一起运行，例如FTP、email和web服务器。MySQL服务器配置成使用适当比例的系统资源；3.Dedicated MySQL Server Machine（专用MySQL服务器）：该选项代表只运行MySQL服务的服务器。假定运行没有运行其它应用程序。MySQL服务器配置成使用所有可用系统资源根据自己情况选择即可，一般WEB服务器选择第二个，Server Machine即可。个人电脑安装选择第一个，Developer Machine比较好，选择完点击Next 配置密码为root用户配置密码，点击Next windows配置默认，点击Next 拓展配置默认，点击Next 申请服务配置点击Execute，等待执行完点击Finish 检查校验配置最后安装图片校验一下刚刚所有的配置，最后点击Finish即可 检验找到安装程序：打开之后输入密码，输入命令：show databases，即可以查看到所有的数据库了。]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL客户端安装之Navicat for Mysql]]></title>
    <url>%2F2017%2F04%2F19%2FMySQL%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85%E4%B9%8BNavicat%20for%20Mysql%2F</url>
    <content type="text"><![CDATA[下载下载地址：https://www.navicat.com/download/navicat-for-mysql选择符合自己电脑的版本，这里以win系统32位为例子。可以看到三个下载点，随便选择一个下载即可 安装双击安装包 欢迎界面点击Next 同意协议书同意协议书，点击Next 选择安装路径选择好安装路径，点击Next 选择菜单文件选择开始菜单名字，点击Next 生成图标勾选 Create a desktop icon ，创建桌面图标，点击Next 安装点击Install,开始安装 安装完成到此，已经安装完毕，点击Finish即可]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>Navicat Premium</tag>
        <tag>数据库客户端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL客户端安装之Navicat Premium]]></title>
    <url>%2F2017%2F04%2F19%2FMySQL%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85%E4%B9%8BNavicat%20Premium%2F</url>
    <content type="text"><![CDATA[破解版本(win32)链接：http://pan.baidu.com/s/1pL37Cld 密码：4sz4注：本文安装教程是使用官方版本，由于暂时未找到注册号，实际使用的是破解版本。 下载下载地址：https://www.navicat.com/download/navicat-premium选择符合自己电脑的版本，这里以win系统32位为例子。可以看到三个下载点，随便选择一个下载即可 安装双击安装包 欢迎界面点击Next 同意协议书同意协议书，点击Next 选择安装路径选择好安装路径，点击Next 选择菜单文件选择开始菜单名字，点击Next 生成图标勾选 Create a desktop icon ，创建桌面图标，点击Next 安装点击Install,开始安装 安装完成到此，已经安装完毕，点击Finish即可 使用前提确保已经安装了MySQL，如果没有安装过，参考MySQL数据库安装这篇文章 打开应用 填写信息如图填写数据库信息，点击 连接测试 可以测试是否成功，提示连接成功之后点击 确定 即可 连接 双击刚刚配置的 连接名 就可以连接到数据库了，具体要连接那个库，也是双击即可]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>Navicat Premium</tag>
        <tag>数据库客户端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins安装]]></title>
    <url>%2F2017%2F04%2F18%2FJenkins%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[下载下载地址： https://jenkins.io/download/选择适合自己电脑型号的版本，我这里下载的是win系统的版本。 安装解压解压，得到jenkins.msi安装包，双击运行 欢迎界面点击Next 选择安装路径选择好安装路径之后，点击Next 安装点击Install，开始安装 等待安装 安装完成到此，Jenkins 已经安装完成，点击Finish跳转到网页上进行配置 配置Jenkins server配置页面在2.6步骤的时候点击Finish会自动跳转到配置页面，如果不小心关闭了，在浏览器上输入 http://127.0.0.1:8080 自行打开 输入默认密码根据提示，找到密码输入，点击Continue 配置Jenkins server安装插件，这里选择推荐的插件进行安装，点击Install suggested plugins即可。当然用户也可以自定义选择插件进行安装，如果这一步选择插件有遗漏的话，后续也可以进行补充安装 等待配置等待安装，等待10分钟左右（电脑配置不同安装时间也不同） 设置用户和密码安装完之后，跳到配置用户和密码的界面，输入相关信息，设置用户和密码，点击 Sava and Finish 即可。如果这一步被跳过，默认用户名就是admin，默认密码就是3.2步骤的密码 配置成功到此，Jenkins server已经配置成功了。点击 Start using Jenkins 开启Jenkins之旅吧！ 访问Jenkins服务器登陆接下来在日常使用中，如果想打开Jenkins服务器，在浏览器输入 http://127.0.0.1:8080 ，填写配置的用户名和密码，点击登陆即可 Jenkins主界面登陆成功之后，就可以进入到Jenkins主界面了。欢迎来到新大陆！ Jenkins服务器维护命令打开控制台/命令行 - &gt;转到您的Jenkins安装目录。分别执行以下命令停止：jenkins.exe stop开始：jenkins.exe start重新启动：jenkins.exe restart]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git安装]]></title>
    <url>%2F2017%2F04%2F18%2FGit%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[下载win版本下载地址： https://git-for-windows.github.io/ 安装双击安装包 Next 选择安装路径选择好安装路径之后，点击Next 选择组件默认打钩，用户可以自行选择其它，这里多选择了在桌面生成图标，点击Next 配置名称设置开始菜单的名称，默认Git，点击Next 设置环境变量在“Adjusting your PATH environment”选项中，默认即可。点击 Next注：这个步骤选择第二项“Use Git from the Windows Command Prompt”， 这样在Windows的命令行cmd中也可以运行git命令了。这样会对以后的一些操作带来方便。 选择https传输方式 配置行结束标记保持默认“Checkout Windows-style, commit Unix-style line endings” 选择终端在终端模拟器选择页面,默认即可，配置后Git Gash的终端比较易用。然后点击“Next” 配置额外选择最后配置Git额外选择默认即可，然后点击“Install”开始安装，如果之前安装过旧版本，会先卸载然后再安装新版本 等待安装 安装完成到此，Git已经安装完毕，点击Finish即可 参考文章：https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SVN服务器、客户端的搭建和使用]]></title>
    <url>%2F2017%2F04%2F17%2FSVN%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[下载下载地址： http://subversion.apache.org/packages.html这里推荐VisualSVN server 服务端和 TortoiseSVN客户端搭配使用。选择适合自己电脑型号的版本，我这里下载的是win系统的32位版本。 VisualSVN server 服务端 TortoiseSVN客户端 安装VisualSVN server 服务端安装欢迎界面点击Next 协议书界面接受协议书，如图打钩，点击Next 选择组件默认，点击Next 选择版本选择标准版本，点击Standard Edition，进行svn服务器配置 配置选择好安装路径、仓库位置、服务端口以及备份地址 安装点击Install，开始安装 等待安装 安装结束点击Finish，到此VisualSVN server已经安装完毕 TortoiseSVN客户端安装欢迎界面点击Next 协议书界面点击Next 选择安装路径选择好安装路径之后，点击Next 安装点击Install，开始安装 等待安装 安装结束点击Finish，到此TortoiseSVN客户端已经安装完毕 svn服务器配置VisualSVN Server 主界面打开 VisualSVN Server.msc 应用 配置仓库选中仓库选择Respositories,右击，选择 Create New Respository 选择仓库类型选择创建FSFS格式的仓库 输入仓库名称 选择仓库结构这里使用推荐 设置仓库权限这里选择用户认证，需用使用配置的特定用户才有权限访问，点击Custom…添加用户 添加用户点击Add… 点击Create user… 输入配置的用户名和密码，配置完返回到配置页面 选择用户权限这里赋予的权限是可读/可写，点击确定 配置完成到这里仓库配置完成，点击Finish即可 查看仓库信息可以看到创建的仓库，点击Users也可以看到配置的用户信息，也可以在Users下面进行用户信息配置，这里就不做演示了 svn客户端使用选择仓库选中仓库之后右击，选择Copy URL to Clipboard,复制仓库地址 Checkout仓库选择位置选择好位置，在电脑的空白处单击右键，选择SVN Checkout… 选择Checkout位置复制刚刚copy的url，选择Checkout位置 用户验证这是非必须步骤，只有首次Checkout才需要填写用户名和密码，用户名和密码是上面所配置的 点击OK 文件上传新建新增文件在Checkout的路径下添加新增文件，这里以test.txt为例子 准备提交文件空白处右击，选择SVN Commit… 提交文件选择要提交的文件并填写注释，点击OK 提交成功提交文件成功，点击OK 查看仓库文件重新刷新客户端上的test仓库，即可看到刚刚提交的文件]]></content>
      <categories>
        <category>svn</category>
      </categories>
      <tags>
        <tag>svn</tag>
        <tag>VisualSVN server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JDK安装]]></title>
    <url>%2F2017%2F04%2F14%2FJDK%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[###下载下载地址： http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 如图，选择适合自己电脑型号的版本，我这里下载的是win系统的32位版本。 安装 双击下载之后的exe，按照提示完成安装，基本是傻瓜式的”下一步”，当然中间可以选择安装路径。注：安装完jdk之后同时会提示安装jre,也是同理安装。如图，这是安装效果： 环境变量配置新建JAVA_HOME系统变量计算机→属性→高级系统设置→高级→环境变量→系统变量→新建变量名字：JAVA_HOME路径（填写实际安装路径）：D:\Java\JDK\jdk1.8.0_121如图： 新建CLASSPATH系统变量变量名字：CLASSPATH路径： .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar（注意最前面有一点）如图： 编辑Path变量在变量最后面添加：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;在变量值最后输入 %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin（注意原来Path的变量值末尾有没有;号，如果没有，先输入；号再输入上面的代码）到此，JDK安装与环境变量配置。 验证运行cmd 输入 java -version ，若如图所示显示版本信息则说明安装和配置成功。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAVEN安装]]></title>
    <url>%2F2017%2F04%2F14%2FMAVEN%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[注意：安装前请确认一下电脑是否安装了JDK，JDK的安装可以参考JDK安装一文。 下载下载地址： http://maven.apache.org/download.cgi 如图，选择适合自己电脑的版本，我这里下载的是win系统的版本。 解压 环境变量配置新建系统变量需要新建M2_HOME和MAVEN_HOME系统变量步骤：计算机→属性→高级系统设置→高级→环境变量→系统变量→新建变量名：M2_HOME变量值（填写实际安装路径）：D:\Java\MAVEN\apache-maven-3.5.0MAVEN_HOME系统变量新增同上。注:Maven 说只是添加 M2_HOME , 但一些项目仍引用 Maven 的文件夹 MAVEN_HOME, 因此，为了安全也把它添加进去。如图： 编辑Path变量在变量最后面添加：%M2_HOME%\bin;在变量值最后输入 %M2_HOME%\bin;（注意原来Path的变量值末尾有没有;号，如果没有，先输入；号再输入上面的代码） 到此，MAVEN安装与环境变量配置。 验证运行cmd 输入 mvn -v,若如图所示显示版本信息则说明安装和配置成功。 修改仓库存位置maven 的仓库默认是放在本地用户的临时文件夹下面的 .m2 文件夹下的 repository 下，我的是在 C:\Users\bank_gz.m2\repository目录下。现在我们来修改将它指定到我们自己的路径下，我现在要将仓库指定到D:\Java\MAVEN\apache-maven-3.5.0\repo 目录下，只需要将maven安装路径下conf里面的seting.xml文件。我的是在D:\Java\MAVEN\apache-maven-3.5.0\conf\seting.xml。把下面注销的本地仓库打开改成如下：修改仓库位置原因：因为maven刚安装的时候我们可以看得到maven很小，只有最基本的东西，但我们一旦使用它，就会把我们的需要的东西都下载到仓库里面，随着我们需要调用的命令越多，仓库会越来越大，所以最好不要放在c盘，不然让系统越来越慢，且以后重装系统，还要再下一次。]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
</search>